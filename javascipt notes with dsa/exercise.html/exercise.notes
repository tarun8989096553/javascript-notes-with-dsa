
vandana malviya <vandana2022malviya@gmail.com>
Oct 10, 2022, 2:25 PM
to mukesh.randhawe, dk070025, Akram, ganeshsavner320, abhishekdubey7174, dhotepravin719, sonali_patel31, yogitasolanki1200, alfezkhan707, patilvishu8727, patelpallavi1995, reshabhjat5, nikitapatidar0198, vrushangsoni782, anujbhadoriya87, tripathirohini07, Ram98060, me, honeyagarwal1221

What is Javascript?

 

                                            


Javascript:-  It is the client-side (browser side) script-based language that is used to implement business logic, validation, animation, and dynamic design view in web application.

Javascript has modified and implemented using a different library.

1 Jquery

2 Angular

3 Angular Js

4 Node JS

 

5 React

 

6 React native

 

7 Knockout

 

8 Particle

 

9 Express

 

image.png

JavaScript is a lightweight, interpreted programming language. It is designed for creating network-centric applications. It is complimentary to and integrated with Java. JavaScript is very easy to implement because it is integrated with HTML. It is open and cross-platform.

Why to Learn Javascript
Javascript is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning Javascript:

Javascript is the most popular programming language in the world and that makes it a programmer’s great choice. Once you learnt Javascript, it helps you developing great front-end as well as back-end softwares using different Javascript based frameworks like jQuery, Node.JS etc.

Javascript is everywhere, it comes installed on every modern web browser and so to learn Javascript you really do not need any special environment setup. For example Chrome, Mozilla Firefox , Safari and every browser you know as of today, supports Javascript.

Javascript helps you create really beautiful and crazy fast websites. You can develop your website with a console like look and feel and give your users the best Graphical User Experience.

JavaScript usage has now extended to mobile app development, desktop app development, and game development. This opens many opportunities for you as Javascript Programmer.

Due to high demand, there is tons of job growth and high pay for those who know JavaScript. You can navigate over to different job sites to see what having JavaScript skills looks like in the job market.

Great thing about Javascript is that you will find tons of frameworks and Libraries already developed which can be used directly in your software development to reduce your time to market.

There could be 1000s of good reasons to learn Javascript Programming. But one thing for sure, to learn any programming language, not only Javascript, you just need to code, and code and finally code until you become expert.

Hello World using Javascript
Just to give you a little excitement about Javascript programming, I'm going to give you a small conventional Javascript Hello World program, You can try it using Demo link

 Live Demo
<html>
   <body>  
      <script language = "javascript" type = "text/javascript">
         <!--
            document.write("Hello World!")
         //-->
      </script>      
   </body>
</html>
There are many useful Javascript frameworks and libraries available:

Angular

React

jQuery

Vue.js

Ext.js

Ember.js

Meteor

Mithril

Node.js

Polymer

Aurelia

Backbone.js

It is really impossible to give a complete list of all the available Javascript frameworks and libraries. The Javascript world is just too large and too much new is happening.

Applications of Javascript Programming
As mentioned before, Javascript is one of the most widely used programming languages (Front-end as well as Back-end). It has it's presence in almost every area of software development. I'm going to list few of them here:

Client side validation - This is really important to verify any user input before submitting it to the server and Javascript plays an important role in validting those inputs at front-end itself.

Manipulating HTML Pages - Javascript helps in manipulating HTML page on the fly. This helps in adding and deleting any HTML tag very easily using javascript and modify your HTML to change its look and feel based on different devices and requirements.

User Notifications - You can use Javascript to raise dynamic pop-ups on the webpages to give different types of notifications to your website visitors.

Back-end Data Loading - Javascript provides Ajax library which helps in loading back-end data while you are doing some other processing. This really gives an amazing experience to your website visitors.

Presentations - JavaScript also provides the facility of creating presentations which gives website look and feel. JavaScript provides RevealJS and BespokeJS libraries to build a web-based slide presentations.

Server Applications - Node JS is built on Chrome's Javascript runtime for building fast and scalable network applications. This is an event based library which helps in developing very sophisticated server applications including Web Servers.

This list goes on, there are various areas where millions of software developers are happily using Javascript to develop great websites and others softwares.

Audience
This tutorial has been prepared for JavaScript beginners to help them understand the basic functionality of JavaScript to build dynamic web pages and web applications.

Prerequisites
For this Javascript tutorial, it is assumed that the reader have a prior knowledge of HTML coding. It would help if the reader had some prior exposure to object-oriented programming concepts and a general idea on creating online applications.



What is JavaScript ?
JavaScript is a dynamic computer programming language. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.

JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name LiveScript. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers.

The ECMA-262 Specification defined a standard version of the core JavaScript language.

JavaScript is a lightweight, interpreted programming language.
Designed for creating network-centric applications.
Complementary to and integrated with Java.
Complementary to and integrated with HTML.
Open and cross-platform
Client-Side JavaScript
Client-side JavaScript is the most common form of the language. The script should be included in or referenced by an HTML document for the code to be interpreted by the browser.

It means that a web page need not be a static HTML, but can include programs that interact with the user, control the browser, and dynamically create HTML content.

The JavaScript client-side mechanism provides many advantages over traditional CGI server-side scripts. For example, you might use JavaScript to check if the user has entered a valid e-mail address in a form field.

The JavaScript code is executed when the user submits the form, and only if all the entries are valid, they would be submitted to the Web Server.

JavaScript can be used to trap user-initiated events such as button clicks, link navigation, and other actions that the user initiates explicitly or implicitly.

Advantages of JavaScript
The merits of using JavaScript are −

Less server interaction − You can validate user input before sending the page off to the server. This saves server traffic, which means less load on your server.

Immediate feedback to the visitors − They don't have to wait for a page reload to see if they have forgotten to enter something.

Increased interactivity − You can create interfaces that react when the user hovers over them with a mouse or activates them via the keyboard.

Richer interfaces − You can use JavaScript to include such items as drag-and-drop components and sliders to give a Rich Interface to your site visitors.

Limitations of JavaScript
We cannot treat JavaScript as a full-fledged programming language. It lacks the following important features −

Client-side JavaScript does not allow the reading or writing of files. This has been kept for security reason.

JavaScript cannot be used for networking applications because there is no such support available.

JavaScript doesn't have any multi-threading or multiprocessor capabilities.

Once again, JavaScript is a lightweight, interpreted programming language that allows you to build interactivity into otherwise static HTML pages.

JavaScript Development Tools
One of major strengths of JavaScript is that it does not require expensive development tools. You can start with a simple text editor such as Notepad. Since it is an interpreted language inside the context of a web browser, you don't even need to buy a compiler.

To make our life simpler, various vendors have come up with very nice JavaScript editing tools. Some of them are listed here −

Microsoft FrontPage − Microsoft has developed a popular HTML editor called FrontPage. FrontPage also provides web developers with a number of JavaScript tools to assist in the creation of interactive websites.

Macromedia Dreamweaver MX − Macromedia Dreamweaver MX is a very popular HTML and JavaScript editor in the professional web development crowd. It provides several handy prebuilt JavaScript components, integrates well with databases, and conforms to new standards such as XHTML and XML.

Macromedia HomeSite 5 − HomeSite 5 is a well-liked HTML and JavaScript editor from Macromedia that can be used to manage personal websites effectively.

Where is JavaScript Today ?
The ECMAScript Edition 5 standard will be the first update to be released in over four years. JavaScript 2.0 conforms to Edition 5 of the ECMAScript standard, and the difference between the two is extremely minor.

The specification for JavaScript 2.0 can be found on the following site: http://www.ecmascript.org/

Today, Netscape's JavaScript and Microsoft's JScript conform to the ECMAScript standard, although both the languages still support the features that are not a part of the standard.
============================================================
JavaScript can be implemented using JavaScript statements that are placed within the
<script>... </script> HTML tags in a web page.

You can place the <script> tags, containing your JavaScript, anywhere within your web page, but it is normally recommended that you should keep it within the <head> tags.

The <script> tag alerts the browser program to start interpreting all the text between these tags as a script. A simple syntax of your JavaScript will appear as follows.

<script ...>
   JavaScript code
</script>
The script tag takes two important attributes −

Language − This attribute specifies what scripting language you are using. Typically, its value will be javascript. Although recent versions of HTML (and XHTML, its successor) have phased out the use of this attribute.

Type − This attribute is what is now recommended to indicate the scripting language in use and its value should be set to "text/javascript".

So your JavaScript segment will look like −

<script language = "javascript" type = "text/javascript">
   JavaScript code
</script>
Your First JavaScript Code


This function can be used to write text, HTML, or both. Take a look at the following code.

<html>
   <body>  
      <script language = "javascript" type = "text/javascript">

            document.write("Hello World!")

      </script>      
   </body>
</html>

JavaScript Variables
4 Ways to Declare a JavaScript Variable:
1)Using var
2)Using let
3)Using const
4)Using nothing
What are Variables?
Variables are containers for storing data (storing data values).

In this example, x, y, and z, are variables, declared with the var keyword:

Example
var x = 5;
var y = 6;
var z = x + y;
In this example, x, y, and z, are variables, declared with the let keyword:
js  is used to create client-side dynamic pages.

JavaScript is an object-based scripting language which is lightweight and cross-platform.

JavaScript is not a compiled language, but it is a translated language. The JavaScript Translator (embedded in the browser) is responsible for translating the JavaScript code for the web browser.

What is JavaScript
JavaScript (js) is a light-weight object-oriented programming language which is used by several websites for scripting the webpages. It is an interpreted, full-fledged programming language that enables dynamic interactivity on websites when applied to an HTML document.
It was introduced in the year 1995 for adding programs to the webpages in the Netscape Navigator browser. Since then, it has been adopted by all other graphical web browsers.
With JavaScript, users can build modern web applications to interact directly without reloading the page every time. The traditional website uses js to provide several forms of interactivity and simplicity.


Although, JavaScript has no connectivity with Java programming language. The name was suggested and provided in the times when Java was gaining popularity in the market. In addition to web browsers, databases such as CouchDB and MongoDB uses JavaScript as their scripting and query language.

Features of JavaScript
There are following features of JavaScript:

All popular web browsers support JavaScript as they provide built-in execution environments.
JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language.

JavaScript is a weakly typed language, where certain types are implicitly cast (depending on the operation).

JavaScript is an object-oriented programming language that uses prototypes rather than using classes for inheritance.
It is a light-weighted and interpreted language.

It is a case-sensitive language.

JavaScript is supportable in several operating systems including, Windows, macOS, etc.
It provides good control to the users over the web browsers.

History of JavaScript
In 1993, Mosaic, the first popular web browser, came into existence. In the year 1994, Netscape was founded by Marc Andreessen. He realized that the web needed to become more dynamic. Thus, a 'glue language' was believed to be provided to HTML to make web designing easy for designers and part-time programmers. Consequently, in 1995, the company recruited Brendan Eich intending to implement and embed Scheme programming language to the browser. But, before Brendan could start, the company merged with Sun Microsystems for adding Java into its Navigator so that it could compete with Microsoft over the web technologies and platforms. Now, two languages were there: Java and the scripting language. Further, Netscape decided to give a similar name to the scripting language as Java's. It led to 'Javascript'. Finally, in May 1995, Marc Andreessen coined the first code of Javascript named 'Mocha'. Later, the marketing team replaced the name with 'LiveScript'. But, due to trademark reasons and certain other reasons, in December 1995, the language was finally renamed to 'JavaScript'. From then, JavaScript came into existence.

Application of JavaScript :-
1)JavaScript is used to create interactive websites. It is mainly used for:
 1)Client-side validation,
2)Dynamic drop-down menus,
3)Displaying date and time,
4)Displaying pop-up windows and dialog boxes (like an alert dialog box, confirm dialog box and prompt dialog box),
Displaying clocks etc.
A=10
a=20


<html>
<body>
<h2>Welcome to JavaScript</h2>
<script>
document.write("Hello JavaScript by JavaScript");
console.log("hello javascript");
</script>
</body>
</html>

 JavaScript Example
 
Within body tag

Within head tag

Javascript example is easy to code. JavaScript provides 3 places to put the JavaScript code: within body tag, within head tag and external JavaScript file.

Let’s create the first JavaScript example.

<html>  
<body>  
<script type="text/javascript">  
document.write("JavaScript is a simple language for shiva concept soulation learners");  
</script>  
</body>  
</html>  

   script tag specifies that we are using JavaScript.

The text/javascript is the content type that provides information to the browser about the data.

The document.write() function is used to display dynamic content through JavaScript. We will learn about document object in detail later.

3 Places to put JavaScript code
1)Between the body tag of html <script>
2)Between the head tag of html <script>
3)In .js file (external javaScript)

1) JavaScript Example : code between the body tag
In the above example, we have displayed the dynamic content using JavaScript. Let’s see the simple example of JavaScript that displays alert dialog box.


<html>  
<body>  
<script type="text/javascript">  
 alert("Helloshiva concept soulation");  
</script>  
</body>  
</html>  

 2) JavaScript Example : code between the head tag
Let’s see the same example of displaying alert dialog box of JavaScript that is contained inside the head tag.

In this example, we are creating a function msg(). To create function in JavaScript, you need to write function with function_name as given below.

To call function, you need to work on event. Here we are using onclick event to call msg() function.

<html>  
<head>  
<script type="text/javascript">  
function test(){  
 alert("Hello   shiva concept soulation");  
}  
</script>  
</head>  
<body>  
<p>Welcome to Javascript</p>  
<form>  
<input type="button" value="click" onclick="test()"/>  
</form>  
</body>  
</html>  

<html>  
<head>  
<script type="text/javascript">  
function add(){  
var a,b,c;
a=parseInt(prompt("Enter 1st no"))
b=parseInt(prompt("Enter 2nd no"))
c=a+b;
alert("Sum"+c)
}  
</script>  
</head>  
<body>  
<font color="red"size="20">
<p>Welcome to Javascript</p>  
<form>  
<input type="button" value="click" onclick="add()"/>  
</form>  
</body>  
</html>  

 External JavaScript file
We can create external JavaScript file and embed it in many html page.

It provides code re usability because single JavaScript file can be used in several html pages.

An external JavaScript file must be saved by .js extension. It is recommended to embed all JavaScript files into a single file. It increases the speed of the webpage.

Let's create an external JavaScript file that prints Helloshiva concept soulation in a alert dialog box
----------------------------------------------------------------------
test.js
----------------------------------------------------------------------
function fun(){  
 alert("Helloshiva concept soulation");  
}  
-----------------------------------------------------------------------


Let's include the JavaScript file into html page. It calls the JavaScript function on button click.
index.html

<html>  
<head>  
<script type="text/javascript" src="test.js"></script>  
</head>  
<body>  
<p>Welcome to JavaScript</p>  
<form>  
<input type="button" value="click" onclick="fun()"/>  
</form>  
</body>  
</html>  
Javascript Architecture:-

DOM (Document Object Model):-


Javascript provides a separate window with a document to contain and access all Html elements.
Javascript can provide accessibility to all HTML elements.






If we want to access an HTML element using javascript then we can use two different syntax


1) document.getElementById("idname").attribute



2) document.getElementByName("elementname").attribute



<input type="text" id="t1"  />


a=document.getElementById("t1").value;





We can write Javascript under HTML document because without HTML document JS has no role.

     <script>
     document.write("Welcome in JS");
     alert("welcom in JS");
    </script>

note:-  if we write JAVASCRIPT internally then we should define it under the <head> section.

Complete Code with HTML and JS?

<!DOCTYPE html>
<html>
<head>
 <title></title>
    <script>
     document.write("Welcome in JS");

     Console.log(“Welcome in js”);
     alert("welcom in JS");
    </script>

</head>
<body>
<p>Welcome in HTML</p>
</body>


</html>



How we declare a variable in Javascript?

we can directly declare a variable in JS without using datatype because JS is a loosely coupled script.

Syntax:-

identifier=value


<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  a=100;
  b=200;
  c=a+b;
  document.write("<h1>"+ c +"</h1>");

 </script>
</head>
<body>


</body>
</html>



<html>

<head>

 <title></title>

 <script type="text/javascript">

   var a,b,c;

  a=parseInt(prompt("Enter 1st no"));

  b=parseInt(prompt("Enter 2nd no"));

  c=a+b;

document.write("<h1>"+ c +"</h1>");

 

 </script>

</head>

<body>

 

 

</body>

</html>

<html>

<head>

 <title></title>

 <script type="text/javascript">

  var p,r,t,si,

 

  p=parseInt(prompt("Enter principle "));

  r=parseInt(prompt("Enter rate"));

  t=parseInt(prompt("Enter time "))

  si=(p*r*t)/100;

document.write("<h1>"+"Simple Intrest : "+si+"</h1>");

 

 </script>

</head>

<body>

 

 

</body>

</html>

<html>

<head>

 <title></title>

 <script type="text/javascript">

  var l,b,a,p;

 

l=parseInt(prompt("Enter length "));

b=parseInt(prompt("Enter breadth"));

  a=l*b;

  p=2*(l+b);

document.write("<h1>"+"Area : "+a+"</h1>");

document.write("<h1>"+"Perimeter: "+p+"</h1>");

 </script>

</head>

<body>

 

 

</body>

</html>

<html>

<head>

 <title></title>

 <script type="text/javascript">

  var p,c,m,tot,per; 

p=parseInt(prompt("Enter physics marks "));

c=parseInt(prompt("Enter che marks"));

m=parseInt(prompt("Enter mat marks"));

tot=p+c+m;

per=tot/3; 

document.write("<h1>"+"total : "+tot+"</h1>");

document.write("<h1>"+"Percentage: "+per+"</h1>");

 

 

 </script>

</head>

<body>

 

 

</body>

</html>

 

It is a client-side script that is used to perform the dynamic operation under an HTML Web page. HTML only provides a set of elements and attributes, CSS provides a set of properties and Javascript provides dynamic code, client-side logic development, validation and animation in the HTML web page.

Javascript can be executed in any Web Browser as compare to other scripts.



(a) Ramesh’s basic salary is input through the keyboard. His dearness allowance is 40% of basic salary, and house rent allowance is 20% of basic salary. Write a program to calculate his gross salary

1.   Bs=input

2.   Hra=bs*20/100

3.   Da=bs*40/100

4.   Gs=bs+da+hra

5.    (b) The distance between two cities (in km.) is input through the keyboard. Write a program to convert and print this distance in meters, feet, inches and centimeters.

6.   (c) If the marks obtained by a student in five different subjects are input through the keyboard, find out the aggregate marks and percentage marks obtained by the student. Assume that the maximum marks that can be obtained by a student in each subject is 100.

(d) Temperature of a city in Fahrenheit degrees is input through the keyboard. Write a program to convert this temperature into Centigrade degrees.

 C = 5/9 x (F-32)

(e) The length & breadth of a rectangle and radius of a circle are input through the keyboard. Write a program to calculate the area & perimeter of the rectangle, and the area & circumference of the circle.

(f) Two numbers are input through the keyboard into two locations C and D. Write a program to interchange the contents of C and D.

List of basic programming exercises

1.       Write a  program to perform input/output of all basic data types.

2.       Write a  program to enter two numbers and find their sum.

3.       Write a  program to enter two numbers and perform all arithmetic operations.

4.       Write a  program to enter length and breadth of a rectangle and find its perimeter.

5.       Write a  program to enter length and breadth of a rectangle and find its area.

6.       Write a  program to enter radius of a circle and find its diameter, circumference and area.

7.       Write a  program to enter length in centimeter and convert it into meter and kilometer.

8.       Write a  program to enter temperature in Celsius and convert it into Fahrenheit.

9.       Write a  program to enter temperature in Fahrenheit and convert to Celsius

10.   Write a  program to convert days into years, weeks and days.

11.   Write a  program to find power of any number x ^ y.

12.   Write a  program to enter any number and calculate its square root.

13.   Write a  program to enter two angles of a triangle and find the third angle.

14.   Write a  program to enter base and height of a triangle and find its area.

15.   Write a  program to calculate area of an equilateral triangle.

16.   Write a  program to enter marks of five subjects and calculate total, average and percentage.

17.   Write a  program to enter P, T, R and calculate Simple Interest.

Write a  program to enter P, T, R and calculate Compound Inter


vandana malviya <vandana2022malviya@gmail.com>
Oct 11, 2022, 2:06 PM
to lokeshjigupta28@gmail.com, mukesh.randhawe, dk070025, Akram, ganeshsavner320, abhishekdubey7174, dhotepravin719, sonali_patel31, yogitasolanki1200, alfezkhan707, patilvishu8727, patelpallavi1995, reshabhjat5, nikitapatidar0198, vrushangsoni782, anujbhadoriya87, tripathirohini07, Ram98060, me, honeyagarwal1221

<!DOCTYPE html>

<html>

<head>

          <title></title>

          <script type="text/javascript">

                  

                   function fun()

                   {

                             num1 = document.getElementById("txt1").value;

                             num2 = document.getElementById("txt2").value;

                             num3 = parseInt(num1)+parseInt(num2);

                             alert(num3);

                   }

          </script>

</head>

<body>

 

 <input type="text" id="txt1" placeholder="Enter first number" />

 <br>

 <br>

 <input type="text" id="txt2" placeholder="Enter second number" />

 <br>

 <br>

 <input type="button" id="btnclick" value="Click" onclick="fun()">

</body>

 

</html>

 

 



Assignment:-

 

1) Templrature convertor from celsius to faharenhite?

 

 

2)  Create a Salary Calculator where basic, ta, da, comm,pf, leave will be entered by the user?

 



js  is used to create client-side dynamic pages.
int =34 float34.64 string ="indore"

=============

<html>  
<head>  
<script>  
function test()
{
a=document.getElementById("t1").value;
document.write("Welcome  : "+"&emsp;"+a+"<br>");
}
</script>  
</head>  
<body>  
<p>Welcome to Javascript</p>    
<font size="20" color="red">
 <input type="text" id="t1">
<input type="button" value="click" onclick="test()"/>  
</font>
----------------------------------------
test.js
----------------------------------------------------------------------
-----------------------------------------
Advantages of External JavaScript
There will be following benefits if a user creates an external javascript:

It helps in the reusability of code in more than one HTML file.
It allows easy code readability.
It is time-efficient as web browsers cache the external js files, which further reduces the page loading time.
It enables both web designers and coders to work with html and js files parallelly and separately, i.e., without facing any code conflictions.
The length of the code reduces as only we need to specify the location of the js file.
Disadvantages of External JavaScript
There are the following disadvantages of external files:

The stealer may download the coder's code using the url of the js file.
If two js files are dependent on one another, then a failure in one file may affect the execution of the other dependent file.
The web browser needs to make an additional http request to get the js code.
A tiny to a large change in the js code may cause unexpected results in all its dependent files.
We need to check each file that depends on the commonly created external javascript file.
If it is a few lines of code, then better to implement the internal javascript code.

JavaScript Comment
JavaScript comments
Advantage of javaScript comments
Single-line and Multi-line comments
The JavaScript comments are meaningful way to deliver message. It is used to add information about the code, warnings or suggestions so that end user can easily interpret the code.

The JavaScript comment is ignored by the JavaScript engine i.e. embedded in the browser.

Advantages of JavaScript comments
There are mainly two advantages of JavaScript comments.

To make code easy to understand It can be used to elaborate the code so that end user can easily understand the code.
To avoid the unnecessary code It can also be used to avoid the code being executed. Sometimes, we add the code to perform some action. But after sometime, there may be need to disable the code. In such case, it is better to use comments.
Types of JavaScript Comments
There are two types of comments in JavaScript.

Single-line Comment
Multi-line Comment
avaScript Single line Comment
It is represented by double forward slashes (//). It can be used before and after the statement.

Let’s see the example of single-line comment i.e. added before the statement.

<script>  
// It is single line comment  
document.write("hello javascript");  
</script>  

<html>
<body>
<script>  
// It is single line comment  
document.write("hello javascript");  
</script>
</body>
</html>

 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
 👍
<html>
<body>
<script>  
var a=10;  
var b=20;  
var c=a+b;//It adds values of a and b variable  
document.write(c);//prints sum of 10 and 20  
</script>  
</body>
</html>
<!DOCTYPE html>
<html>
<head>
    <title></title>
    <script type="text/javascript">
       
        function fun()
        {
             num1 = document.getElementById("txt1").value;
            num2 = document.getElementById("txt2").value;
            num3 = parseInt(num1)+parseInt(num2);            
document.getElementById("ans").innerHTML= "Sum ="+num3;

        }
    </script>
</head>
<body>

 <input type="text" id="txt1" placeholder="Enter first number" />
 <br>
 <br>
 <input type="text" id="txt2" placeholder="Enter second number" />
 <br>
 <br>
 <input type="button" id="btnclick" value="Click" onclick="
 fun()">
 <p id="ans"></p>
</body>

</html>




===================
<html>  
<head>  
<script type="text/javascript">  
function area()
{  var l,b,a;
    l=Number(prompt("Enter length"));
    b=Number(prompt("Enter breadth"));
    a=l*b;
document.getElementById("ans").innerHTML= "Area ="+a;
}  
function add()
{  var a,b,c;
    a=Number(prompt("Enter 1st no"));
    b=Number(prompt("Enter 2nd no"));
    c=a+b;
document.getElementById("ans").innerHTML= "Aadd ="+c;
}  
function sub()
{  var a,b,c;
    a=Number(prompt("Enter 1st no"));
    b=Number(prompt("Enter 2nd no"));
    c=a-b;
document.getElementById("ans").innerHTML= "sub ="+c;
}  
function mult()
{  var a,b,c;
    a=Number(prompt("Enter 1st no"));
    b=Number(prompt("Enter 2nd no"));
    c=a*b;
document.getElementById("ans").innerHTML= "mult ="+c;
}  
function div()
{  var a,b,c;
    a=Number(prompt("Enter 1st no"));
    b=Number(prompt("Enter 2nd no"));
    c=a/b;
document.getElementById("ans").innerHTML= "div ="+c;
}  
</script>  
</head>  
<body>  
<p>Welcome to Javascript</p>  
<form>  
<input type="button" value="sub"
onclick="sub()">  
<input type ="button" value="area" onclick="area()">
<input type ="button" value="mult" onclick="mult()"/>
<input type ="button" value="div" onclick="div()"/>
<input type ="button" value="add" onclick="add()"/>

</form>  
<p id= "ans"></p>
</body>  
</html>  


**********************
<!DOCTYPE html>
<html>
<head>
      <title></title>
      <script type="text/javascript">
           
            function sum()
            {
num1 = document.getElementById("txt1").value;
num2 = document.getElementById("txt2").value;
num3 = Number(num1)+Number(num2);
      /*alert(num3);*/
document.getElementById('result').textContent = "ans "+num3;  
document.getElementById('result').innerHTML = "ans "+num3;
             
            }
      </script>
</head>
<body>
 <input type="text" id="txt1" placeholder="Enter first number" />
 <br>
 <br>
 <input type="text" id="txt2" placeholder="Enter second number" />
 <br>
 <br>
 <input type="button" id="btnclick" value="Click" onclick="sum()">

<p id="result">
</body>

</html>




...

[Message clipped]  View entire message
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
vandana malviya <vandana2022malviya@gmail.com>
Tue, Oct 11, 2022, 2:09 PM
to mukesh.randhawe, dk070025, Akram, ganeshsavner320, abhishekdubey7174, dhotepravin719, sonali_patel31, yogitasolanki1200, alfezkhan707, patilvishu8727, patelpallavi1995, reshabhjat5, nikitapatidar0198, vrushangsoni782, anujbhadoriya87, tripathirohini07, Ram98060, me, honeyagarwal1221, lokeshjigupta28

<!DOCTYPE html>  
<html>  
<head>  
<script type="text/javascript">
  var a1,a2,a3,b1,b2,b3,sum,rev;
  var n = parseInt(prompt("enter any 4 digit number"));//1234
  a1=Math.floor(n/1000);//=1
  b1=n%1000;//=234
  a2=Math.floor(b1/100);//=2
  b2=b1%100;//=34
  a3=Math.floor(b2/10);//3
  b3=b2%10;//=4
  sum=a1+a2+a3+b3;
  rev=(b3*1000)+(a3*100)+(a2*10)+a1;
document.write("Sum="+sum+"<br>");
document.write("reverse="+rev+"<br>");


 /*document.write(10/3+"<br>");
 document.write(Math.floor(10/3));*/
         
</script>
</head>  
   
<body>  
</body>  
</html>  

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

vandana malviya <vandana2022malviya@gmail.com>
Wed, Oct 12, 2022, 2:14 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, anwar10172002, vrushangsoni782, alfezkhan707, me

JavaScript Arithmetic Operators
Arithmetic operators are used to perform arithmetic operations on the operands. The following operators are known as JavaScript arithmetic operators.


Operator Description Example
+ Addition 10+20 = 30
- Subtraction 20-10 = 10
* Multiplication 10*20 = 200
/ Division 20/10 = 2
% Modulus (Remainder) 20%10 = 0
c=10/3=3
c=10%3=1                     a++ a=a+1   a-- a=a-1
++ Increment var a=10; a++; Now a = 11
-- Decrement var a=10; a--; Now a = 9

 
JavaScript Comparison Operators
The JavaScript comparison operator compares the two operands. The comparison operators are as follows:

Operator Description Example
== Is equal to 10==20 = false
=== Identical (equal and of same type) 10.3==2.0 = false  2.2===2.2
!= Not equal to 10!=20 = true
!== Not Identical 20!==20 = false
> Greater than 20>10 = true
>= Greater than or equal to 20>=10 = true
< Less than 20<10 = false
<= Less than or equal to 20<=10 = false
JavaScript Bitwise Operators
The bitwise operators perform bitwise operations on operands. The bitwise operators are as follows:

 


JavaScript Logical Operators
The following operators are known as JavaScript logical operators.

Operator Description Example
&& Logical AND (10==10 && 20==33) = false
|| Logical OR (10==10 || 20==33) = true
! Logical Not !(10==20) = true
JavaScript Assignment Operators
The following operators are known as JavaScript assignment operators.

Operator Description Example
= Assign 10+10 = 20
+= Add and assign var a=10; a+=20; Now a = 30   c=c+10   c+=10
a=a+30
a+=30


a+=30
-= Subtract and assign var a=20; a-=10; Now a = 10   a=a-30   =>  a-=30
     
*= Multiply and assign var a=10; a*=20; Now a = 200
/= Divide and assign var a=10; a/=2; Now a = 5
%= Modulus and assign var a=10; a%=2; Now a = 0
c=10/3=3
c=10%3=1

if(condition)
  {
        if(condition)
       {
       }
    else
     {
      }
  }
  else
  {
          if(condition)
          {
         }
        else
        {
        }
  }


WAP to calculate the greatest number?
var a='a';
  ch.charCodeAt() >= 65 && ch.charCodeAt() <= 90;
<script>

         var a =parseInt(prompt("Enter 1st number"));
  var b =parseInt(prompt("Enter 2nd number"));
  var c =parseInt(prompt("Enter 3rd number"));
         if(a>b)
         {
             if(a>c)
             document.write("a is greater");
             else
             document.write("c is greater");
         }
        else
        {
           if(b>c)
           document.write("b is greatest");
           else
           document.write("c is greatest");
        }
 </script>

if(a>b)&& (a>c))
d.w(a)
if(b>a)&& (b>c))
d.w(b)
if(c>a)&& (c>b))
d.w(a)



WAP to calculate greatest using four different numbers?

<script>
var a=10000,b=2000,c=3000,d=4000;
if(a>b)
{    if(a>c)
    {
         if(a>d)
         document.write("a is greatest");
        else
         document.write("d is greatest");      
    }
    else
    {
       if(c>d)
      document.write("c is greatest");
      else
       document.write("d is greatest");
    }
}
else
{
    if(b>c)
    {
        if(b>d)
           document.write("b is greatest");
        else
           document.write("d is greatest");  
    }

   else
   {
       
       if(c>d)
      document.write("c is greatest");
      else
       document.write("d is greatest");
    }


}




WAP to check vowel and consonant?

/* WAP to check vowel and consonant */
<script>
        var ch;
        ch=prompt("Enter char");      
        var s= "";
       if(ch=='a')
          s = "Vowel";
       else
       {
           if(ch=='e')
            s = "Vowel";
          else
            {
                if(ch=='i')
                  s = "Vowel";
                else
                 {
                     if(ch=='o')
                     s = "Vowel";
                     else
                     {
                         if(ch=='u')
                            s = "Vowel";
                         else
                           s = "Consonent";
                     }
                 }

            }
       }

       document.write(s);
       
</script>
     

 


Limitation:-

Its structure is complex for multiple conditions, for example, if we want to check maximum using five different numbers?


Advantage:-

We can create a conditional-based program without using logical operators.


4) Ladder If--Else or Else If Block:-

It will work step by step means if the first condition will true then it will be executed when it will be false then the next condition will be checked and finally, if no one condition will be true then else statement will be executed.

we will use if, else if, and else statement using Ladder If--Else.


Syntax of Ladder if else if

if(condition)
{
        Statement
}
else if(condition)
{
   Statement;

}
...
else
{
   Statement;
}


WAP to check the greatest number using Ladder if-else?
<script>
   var a=100,b=30,c=20;
   if(a>b &&a>c)
   document.write("a is greatest");
   if(b>a &&b>c)
      document.write("b is greatest");
   if(c>a&&c>b)
      document.write("c is greatest");  
</script>


<script>
   var a=100,b=30,c=20;
   if(a>b &&a>c)
   document.write("a is greatest");
    else if(b>c)
      document.write("b is greatest");
   else
      document.write("c is greatest");  
</script>

WAP to check greatest using four different numbers?
<script>
var a=1000,b=2000,c=3000;
if(a>b && a>c  )  
      document.write("a is greatest");
if (b>a && b>c)  
      document.write("b is greatest");
if (c>a && c>b)  
      document.write("c is greatest");
</script>


<script>
var a=1000,b=2000,c=3000,d=4000;

if(a>b && a>c && a>d)  
      document.write("a is greatest");
else if (b>c && b>d)  
      document.write("b is greatest");
else if(c>d)        
      document.write("c is greatest");
else
      document.write("d is greatest");
</script>


WAP to check vowel and consonant using Ladder if--else:-

/* WAP to check vowel and consonent */
<script>

     var ch;
        ch=prompt("Enter char");
       
        var s= "";
       if(ch=='a')
          s = "Vowel";
       else if(ch=='e')
          s = "Vowel";
       else if(ch=='i')
          s = "Vowel";
       else if(ch=='o')
          s = "Vowel";
       else if(ch=='u')
          s = "Vowel";
       else
          s = "Consonent";
     document.write(s);
</script>


5) Multiple If:-

We can write more than one if statement to solve multiple conditions with multiple results.


Syntax of Multiple If:-


if(condition)
{
     Statement;
 }
if(condition)
{
    Statement;
}
 if(condition)
{
   statement;
}

WAP to check divisibility of numbers that number is divisible by 3,5 and 9 with all combinations?






var num=27
if(num%3==0)
document.write("Divisible by 3");
if(num%5==0)
document.write("Divisible by 5");
if(num%9==0)
document.write("Divisible by 9");
</script>


Assignment of If--else:

Q1)  WAP to display yes, no, and cancel when the user assigns y,n, and c?

<script>
  var ch=prompt("Enter any char (y/n/c)");
  if(ch=='y')
   document.write("Yes");
  else if(ch=='n')
  document.write("NO");
  else if(ch=='c')
   document.write("Cancel")
   else
     document.write("Other");
</script>


Q2)  WAP to check 1 digit, 2 digits,3 digits, and above 3 digit number?


1. Write  program to find minimum between two numbers.
2. Write a  program to find minimum between three numbers.
3. Write a program to check whether a number is negative, positive or zero.
4. Write a program to check whether a number is divisible by 5 and 11 or not.
5. Write a program to check whether a number is even or odd.
6. Write a program to check whether a year is leap year or not.
7. Write a program to check whether a character is alphabet or not.
8. Write a program to input any alphabet and check whether it is vowel or consonant.
9. Write a program to input any character and check whether it is alphabet, digit or special character.
10. Write a program to check whether a character is uppercase or lowercase alphabet.
11. Write a program to input week number and print week day.
12. Write a program to input month number and print number of days in that month.
13. Write a program to count total number of notes in given amount.
14. Write a program to input angles of a triangle and check whether triangle is valid or not.sum=180
15. Write a program to input all sides of a triangle and check whether triangle is valid or not.
16. Write a program to check whether the triangle is equilateral, isosceles or scalene triangle.
17. Write a program to find all roots of a quadratic equation.
18. Write a program to calculate profit or loss.
19. Write a program to input marks of five subjects Physics, Chemistry, Biology, Mathematics and Computer. Calculate percentage and grade according to following:
Percentage >= 90% : Grade A
Percentage >= 80% : Grade B
Percentage >= 70% : Grade C
Percentage >= 60% : Grade D
Percentage >= 40% : Grade E
Percentage < 40% : Grade F
20. Write a program to input basic salary of an employee and calculate its Gross salary according to following:
Basic Salary <= 10000 : HRA = 20%, DA = 80%
Basic Salary <= 20000 : HRA = 25%, DA = 90%
Basic Salary > 20000 : HRA = 30%, DA = 95%
21. Write a program to input electricity unit charges and calculate total electricity bill according to the given condition:
For first 50 units Rs. 0.50/unit
For next 100 units Rs. 0.75/unit
For next 100 units Rs. 1.20/unit
For unit above 250 Rs. 1.50/unit
An additional surcharge of 20% is added to the bill

 
=====================================================================================================================================================================================================================================================================================================================================================================================================================================
vandana malviya <vandana2022malviya@gmail.com>
Fri, Oct 14, 2022, 2:12 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, anwar10172002, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

Conditional Statements

Very often when you write code, you want to perform different actions for different decisions.
1)>, < ,>= ,<= ,== ,!=

logical operators
1) and  =&&
2) or=||
3) not =!

A)IF----->Use if to specify a block of code to be executed, if a specified condition is true
B)ELSE----->Use else to specify a block of code to be executed, if the same condition is false
C) ELSE -IF ---->Use else if to specify a new condition to test, if the first condition is false
D)SWITCH-CASE---->Use switch to specify many alternative blocks of code to be executed
Conditional Statement in JavaScript:-
Type of Conditional Statement:-

1)  Simple If:-  It is used to display result based on true condition,
      if(condition)
       statement;

     or
     if(condition)
    {        multiple statements;
                  statement;
    }
----------------------------
<html>
<head>
</head>
<body>
<script>
var age;
age=parseInt(prompt("Enter your age"));
if(age>=18)
   document.write("eligiable for voteing");
</script>

</body>
</html>
-----------------------
<html>
<head>
</head>
<body>
<script>
var age;
age=parseInt(prompt("Enter your age"));
if(age>=18)
   document.write("eligiable for voteing");
else
   document.write("NOT eligiable for voteing");
</script>

</body>
</html>





note:-  we should use {} when we want to contain multiple statements.
Q) WAP to display "You are Qualvarine for 15 days " if a person is Covid positive otherwise not display any message?
Solution 1st:-
<script>
var s=prompt("Enter covid result");
       if(s=="positive")
       {
          document.write("You are quarantine for 15 days");      
       }
   else
          document.write("You are NOT quarantine for 15 days");      
   
</script>
WAP to increase the salary of employees from 500, if the salary is less than 10000 otherwise the same salaries will display?

<script>

         var sal=8000;
       
         if(sal<10000)
           sal=sal+500;
         document.write(sal);
</script>

/*WAP to pass student by grace if the entered subject mark is >28 and <33 otherwise same mark will display.*/
var mark =parseInt(prompt("Enter number"));
       var g;
          if(mark>=28 && mark<33) 29
           {
            g = 33-mark;    g=33-29 =4
            mark =mark+g;    29+4=33
            document.write("Grace marks is "+g); 4
           }
          document.write("mark is"+mark); 33
</script>

2)  If--else:-

 Using this we can create a program when the condition is true and false both "if" block for the true condition and "else" block for the false condition.

Syntax:-

  if(condition)
 {
      Statements;
 }
else
{

    Statements;
}
<html>
<head>
</head>
<body>
<script>
 
var a=parseInt(prompt("Enter 1st no"));
var b=parseInt(prompt("Enter 2nd no"));

       if(a>b)
                document.write("a is greater");      
      else
                document.write("b is greater");      

       
</script>

</body>
</html>

n=1234   1+2+3+4




<!DOCTYPE html>
<html>
<head>
<script type="text/javascript">
var n,a1,a2,a3,b1,b2,b3,sum,rev;
n=parseInt(prompt("Enter any 4 digit no"));1234 1+2+3+4
a1=Math.floor(n/1000);// 1
b1=n%1000; // 234
a2=Math.floor(b1/100);// 2
b2=b1%100; //34
a3=Math.floor(b2/10);// 3
b3=b2%10; //4
sum=a1+a2+a3+b3;
document.write("Sum ="+sum);
rev=(b3*1000)+(a3*100)+(a2*10)+a1;
document.write("Reverse ="+rev);    
</script>

</head>
<body>

</body>
</html>

153, 370, 371, 407


%= returns the remainder
wap to check no is even or odd
<script>
 
 
  var n =parseInt(prompt("Enter number"));
       
          if(n%2==0)  
            document.write("even ");
         else
              document.write("odd");
</script>

odd =square
even=cube
wap to input a 3 digit no and check wheather the number is armstrong no or not
153
x=1*1*1=1
y=5*5*5=125
z=3*3*3=27
153
sum=x+y+z
if(sum==n)
153
<!DOCTYPE html>
<html>
<head>
<script type="text/javascript">
var n,a1,a2 ,b1,b2 ;
n=parseInt(prompt("Enter any 3 digit no"));
a1=Math.floor(n/100);//1
b1=n%100;//=53
a2=Math.floor(b1/10);//=5
b2=b1%10;//=3
x=a1*a1*a1;
y=a2*a2*a2;
z=b2*b2*b2;
if ((x+y+z)==n)
   document.write("armstrong no");    
else
  document.write("not armstrong  no");
</script>
   
</head>
<body>

</body>
</html>

WAP to calculate square if the number is odd and calculate the cube if the number is even?

<script>
         var num=4;
         var res=0;
         if(num%2==0)
           res=num*num*num;
         else
           res=num*num;
         document.write(res);
</script>

3) Nested If--else:-

We will solve more than one condition using nested if-else,
Syntax:-
if(condition)
  {
        if(condition)
       {
       }
    else
     {
      }
  }
  else
  {
          if(condition)
          {
         }
        else
        {
        }
  }


WAP to calculate the greatest number?

<script>

         var a =parseInt(prompt("Enter 1st number"));
  var b =parseInt(prompt("Enter 2nd number"));
  var c =parseInt(prompt("Enter 3rd number"));
         if(a>b)
         {
             if(a>c)
             document.write("a is greater");
             else
             document.write("c is greater");
         }
        else
        {
           if(b>c)
           document.write("b is greatest");
           else
           document.write("c is greatest");
        }
 </script>

WAP to calculate greatest using four different numbers?

<script>
var a=10000,b=2000,c=3000,d=4000;
if(a>b)
{    if(a>c)
    {
         if(a>d)
         document.write("a is greatest");
        else
         document.write("d is greatest");      
    }
    else
    {
       if(c>d)
      document.write("c is greatest");
      else
       document.write("d is greatest");
    }
}
else
{
    if(b>c)
    {
        if(b>d)
           document.write("b is greatest");
        else
           document.write("d is greatest");  
    }

   else
   {
       
       if(c>d)
      document.write("c is greatest");
      else
       document.write("d is greatest");
    }


}




WAP to check vowel and consonant?

/* WAP to check vowel and consonant */
<script>
        var ch;
        ch=prompt("Enter char");      

       if(ch=='a')
          document.write("Vowel");
         else
               if(ch=='e')
                     document.write("Vowel");
                else
           
                if(ch=='i')
                  document.write("Vowel");
                else                  
                     if(ch=='o')
                     document.write("Vowel");
                     else
                     
                         if(ch=='u')
                           document.write("Vowel");
                         else
                           document.write("Consonent");

       
       
</script>
     

 


Limitation:-

Its structure is complex for multiple conditions, for example, if we want to check maximum using five different numbers?


Advantage:-

We can create a conditional-based program without using logical operators.


4) Ladder If--Else or Else If Block:-

It will work step by step means if the first condition will true then it will be executed when it will be false then the next condition will be checked and finally, if no one condition will be true then else statement will be executed.

we will use if, else if, and else statement using Ladder If--Else.


Syntax of Ladder if else if

if(condition)
{
        Statement
}
else if(condition)
{
   Statement;

}
...
else
{
   Statement;
}


if((a>b)&&(a>c))
   document.write("A is greater");
if((b>a)&&(b>c))
   document.write("b is greater");
if((c>b)&&(c>a))
   document.write("c is greater");




WAP to check the greatest number using Ladder if-else?
<script>
   var a=100,b=30,c=20;
   if(a>b &&a>c)
   document.write("a is greatest");
   if(b>a &&b>c)
      document.write("b is greatest");
   if(c>a&&c>b)
      document.write("c is greatest");  
</script>


<script>
   var a=100,b=30,c=20;
   if(a>b &&a>c)
   document.write("a is greatest");
    else if(b>c)
      document.write("b is greatest");
   else
      document.write("c is greatest");  
</script>

WAP to check greatest using four different numbers?
<script>
var a=1000,b=2000,c=3000;
if(a>b && a>c  )  
      document.write("a is greatest");
if (b>a && b>c)  
      document.write("b is greatest");
if (c>a && c>b)  
      document.write("c is greatest");
</script>


<script>
var a=1000,b=2000,c=3000,d=4000;

if(a>b && a>c && a>d)  
      document.write("a is greatest");
else if (b>c && b>d)  
      document.write("b is greatest");
else if(c>d)        
      document.write("c is greatest");
else
      document.write("d is greatest");
</script>


WAP to check vowel and consonant using Ladder if--else:-

/* WAP to check vowel and consonent */
<script>

     var ch;
        ch=prompt("Enter char");
       
        var s= "";
       if(ch=='a')
          s = "Vowel";
       else if(ch=='e')
          s = "Vowel";
       else if(ch=='i')
          s = "Vowel";
       else if(ch=='o')
          s = "Vowel";
       else if(ch=='u')
          s = "Vowel";
       else
          s = "Consonent";
     document.write(s);
</script>


5) Multiple If:-

We can write more than one if statement to solve multiple conditions with multiple results.


Syntax of Multiple If:-


if(condition)
{
     Statement;
 }
if(condition)
{
    Statement;
}
 if(condition)
{
   statement;
}

WAP to check divisibility of numbers that number is divisible by 3,5 and 9 with all combinations?






var num=22
if(num%3==0)
document.write("Divisible by 3");
if(num%5==0)
document.write("Divisible by 5");
if(num%9==0)
document.write("Divisible by 9");
</script>


Assignment of If--else:

Q1)  WAP to display yes, no, and cancel when the user assigns y,n, and c?

<script>
  var ch=prompt("Enter any char (y/n/c)");
  if(ch=='y')
   document.write("Yes");
  else if(ch=='n')
  document.write("NO");
  else if(ch=='c')
   document.write("Cancel")
   else
     document.write("Other");
</script>

<!DOCTYPE html>
<html>
<head>
<script>
   var p,c,m,tot,per;
   var p =parseInt(prompt("Enter phy number"));
  var c =parseInt(prompt("Enter che number"));
  var m =parseInt(prompt("Enter mat number"));
  tot=p+c+m;
  per=tot/3;
      if(per>=60)
            document.write("1st div");
         else
             if(per>=50)
                document.write("2nd div");
             else
                if(per>=40)
                   document.write("3rd div");
                else
                   document.write("Fail");





     
</script>

</head>
<body>

</body>
</html>



Q2)  WAP to check 1 digit, 2 digits,3 digits, and above 3 digit number?
if(n>0 && n<=9)
 
if(











34,65,23

Q3) WAP to find the middle number in three different numbers?
<script>
      var a=100,b=12,c=340;
      if((a>b && a<c )|| (a<b && a>c))
         document.write("a is middle number");
      else if(b>a && b<c || b<a && b>c)
          document.write("b is middle number");
      else
          document.write("c is middle number");  
   }
}


multiple option and u have to select one option in that


1) add
2) sub
3)mul
4)div
enter ur choice 4

if(ch==1)
     c=a+b
if(ch==2)
     c=a-b
if(ch==3)
     c=a*b
if(ch==4)
     c=a/b
switch(expression)
{
        case 1:
                   statement1;
                   break;
        case 2:
                   statement1;
                   break;
        case n:
                   statement1;
                   break;
        default:          

}
wap to input a number and check
1)even/odd
2)neg/pos
3)square
4)cube
153
1*1*1=1
5*5*5=125
3*3*3=27
153

<!DOCTYPE html>
<html>
<body>
<script>
var a,b,c,ch;
ch=parseInt(prompt("Enter ur choice 1) add 2) sub 3) mult 4) div"));
switch(ch)
{   case 1:  
                 a=parseInt(prompt("Enter 1st no"));
                  b=parseInt(prompt("Enter 2nd no"));
                   c=a+b;
                   document.write("Add"+c);
                   break;
  case 2:   a=parseInt(prompt("Enter 1st no"));
            b=parseInt(prompt("Enter 2nd no"));

              c=a-b;
                   document.write("sub"+c);
                   break;
  case 3:   a=parseInt(prompt("Enter 1st no"));
            b=parseInt(prompt("Enter 2nd no"));

            c=a*b;
                   document.write("mult"+c);
                   break;
  case 4: a=parseInt(prompt("Enter 1st no"));
            b=parseInt(prompt("Enter 2nd no"));

    c=a/b;
                   document.write("div"+c);
                   break;
  default: document.write("invalid choice");
}


</script>

</body>
</html>


<!DOCTYPE html>
<html>
<body>
<script>
var n,ch;
ch=parseInt(prompt("Enter ur choice 1) square 2) cube 3) -neg/pos 4) even/odd   5)table" ));
n=parseInt(prompt("Enter any no"));
switch(ch)
{   case 1:  
          //n=parseInt(prompt("Enter any no"));
          document.write("square"+n*n);
          break;
  case 2:  // n=parseInt(prompt("Enter any no"));                
                   
                   document.write("cube"+n*n*n);
                   break;
  case 3:  // n=parseInt(prompt("Enter any no"));                
                   if (n>0)
                      document.write("positive");
                  else
                        document.write("negative");
                   break;
  case 4:
             // n=parseInt(prompt("Enter any no"));                
                   if (n%2==0)
                      document.write("even");
                  else
                        document.write("odd");
                   break;
  case 5:
              //n=parseInt(prompt("Enter any no"));                
               var a,i=1;
                do
                    {   a=n*i;
            document.write(n + "* " +i +"="+a+"<br>");
                          i=i+1;
                       }
                  while(i<=10);  
                   break;

  default: document.write("invalid choice");
}


</script>

</body>
</html>








-------------------------------------
The switch statement is used to perform different actions based on different conditions.

The JavaScript Switch Statement
Use the switch statement to select one of many code blocks to be executed.

Syntax
switch(expression) {
  case 1:
    // code block
    break;
  case 2:
    // code block
    break;
  case n:
    // code block
    break;

  default:
    // code block
}
This is how it works:

The switch expression is evaluated once.
The value of the expression is compared with the values of each case.
If there is a match, the associated block of code is executed.
If there is no match, the default code block is executed.


<!DOCTYPE html>
<html>
<body>
<script>  
var grade='C';  
var result;  
switch(grade){  
case 'A':  
result="A Grade";  
break;  
case 'B':  
result="B Grade";  
break;  
case 'C':  
result="C Grade";  
break;  
default:  
result="No Grade";  
}  
document.write(result);  
</script>  
</body>
</html>

 




---------------------------------------------------------
The getDay() method returns the weekday as a number between 0 and 6.

(Sunday=0, Monday=1, Tuesday=2 ..)

This example uses the weekday number to calculate the weekday name:

<html>
<body>
<font size="20"color="red">

<script>

 
switch (new Date().getDay()) {
  case 0:
    day = "Sunday";
    break;
  case 1:
    day = "Monday";
    break;
  case 2:
    day = "Tuesday";
    break;
  case 3:
    day = "Wednesday";
    break;
  case 4:
    day = "Thursday";
    break;
  case 5:
    day = "Friday";
    break;
  case  6:
    day = "Saturday";
}
document.write( "Today is " + day);
</script>

</script>
</body>
</html>
What is leap year and why do we have it?
In a leap year, we add an extra day on 29 February to our calendar of 365 days. What goes around: The reason we have February 29 every four years is because of two different time cycles involved with the rotation of the Earth. Leap years happen every four years, except if the year is a multiple of 100.
<script>
year=parseInt(prompt("Enter year"));

if (year%400==0 || (year%4==0 && year%100!==0)
      document.write("Leap year");
else
    document.write("NOT a Leap Year")

Loop or Control Structure Statement in Javascript:-

It is used to enumerate large statements of data using a single repeatable block. Loop is also called control Structure.

It is used to solve range-based problems, for example, we want to display marks of 5000 students then we will use Loop

 


Loop is mostly used in Array  
i) while
ii)do-while
iii)for loop
iv)for-in
v)for-off

Loop is also called control structure because it will provide a common block that will be controlled by the condition.

It is also called iterative statements because it will iterate the program code under the common repeatable block of code.

Loop uses three statements for program execution
                                  Forward                                 Backward

initialization  :-         i= 1                                    i=10
Condition :-              i<=10                                  i>=1
Iteration                    i++                                           i--

Type of Loop:-
1) Entry Control:-

     First Check Condition Then Execute Statements
     1.1) while:-  

This loop will work when the condition will be true, while loop can be used to create a finite and infinite based program both.
    but we mostly prefer infinite-based programs using while because for loop provide simple structure to implement the finite based program.

Syntax of While Loop:-
 initialization;

while(condition)  
{
      Statement;
      increment;

}

example
<html>
<script>
var i=1;
while(i<=10)
{
 document.write("<br>"+i);
  i=i+1;
}
</script>
</html>

👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍
ASSIGNMENT - PRINT THIS SERIES

2,4,6,8,10............50
1,3,5,7,9........50
1,4,9,16.......50
1,8,27.........50
1+2+3+4+5+6.......10=sum 55

 i=1
1
i=1+1=2
2
i=2+1=3

<html>
<script>
var i=1;
var name=prompt("Enter your name");

while(i<=10)
{
 document.write("<br>"+name+" "+i);
  i=i+1;
}
</script>
</html>


<html>
<script>
var i=2;
while(i<=50)
{
 document.write("<br>"+name+" "+i);
  i=i+2;
}
</script>
</html>


<html>
<script>
var i=1,a;
while(i<=50)
{
    a=i*i;
 document.write("<br>"+a+" ");
  i=i+1;
}
</script>
</html>
1 4 9 16...50
<html>
<script>
var i=1,sum=0;
while(i<=10)
{
    sum=sum+i;
 document.write("<br>"+i );
  i=i+1;
}
 document.write("<br>"+"sum = "+sum);
</script>
</html>
 

<!DOCTYPE html>
<html>
<head>
  <title></title>
  <script type="text/javascript">
   
    function sum()
    {
num1 = document.getElementById("txt1").value;
num2 = document.getElementById("txt2").value;
num3 = parseInt(num1)+parseInt(num2);
  alert("Sum= "+num3);
    }
    function sub()
    {
num1 = document.getElementById("txt1").value;
num2 = document.getElementById("txt2").value;
num3 = parseInt(num1)-parseInt(num2);
  alert("Sub= "+num3);
    }
   
    </script>
   
</head>
<body>
<form name="f1">
 <input type="text" id="txt1" placeholder="Enter first number" />
 <br>
 <br>
 <input type="text" id="txt2" placeholder="Enter second number" />
 <br>
 <br>
 <input type="button" id="btnclick" value="Sum" onclick="sum()">
 <input type="button" id="btnclick" value="Sub" onclick="sub()">
 <input type="button" id="btnclick" value="div" onclick="div()">
 <input type="button" id="btnclick" value="mult" onclick="mult()">
 
 <input type="reset" value="clear">
 </form>
</body>

</html>






do-while loop

do
{
       statement;
       
}while(condiction);


wap to calculate factorial of a number
5=1*2*3*4*5=120

<html>
<body>
<script>  
var i=1,n,a=1;  
n=parseInt(prompt("Enter any no"));
do{  
      a=a*i;
      i=i+1;  
}while (i<=n);  
document.write("factorial ="+a);
n=5
i=1 a=1
a=1*1=1
i=2
a=1*2=2
i=3
a=2*3=6
i=4
a=6*4=24
i=5
a=24*5=120

document.write("Factorial of "+n+" is "+a + "<br/>");  
</script>  
</body>
</html>

n=5  a=1 i=1
a=1*1=1     i=2
a=1*2=2    i=3
a= 2*3=6   i=4
a=6*4 =24  i=5
a= 24*5=120 i=6






n=5 a=1 i=1
a=1*1=1  i=2
a=1*2=2  i=3
a=2*3=6 i=4
a=6*4=24 i=5
a=24*5=120


<html>
<script>
var i=10;
while(i>=1)
{
 document.write("<br>"+i);
  i=i-1;
}
</script>
</html>
<html>
<font size="10" color="red">
<script>
var i=1,n,a;
n=parseInt(prompt("Enter any no"));2
while(i<=10)
{
    a=n*i;
 document.write(n+"*"+i+"="+a+"<br>");
if (i==5)
    break;
  i=i+1;
}
</script>
</html>
i=1 n=3 a
a=3*1=1  i=2
a=3*2=6 i=3
a=3*3=9 i=4
a=3*4=12 i=5



1. 1)Write a   program to count number of digits in a number.
2. 2)Write a   program to enter a number and print its reverse.
3. 3)Write a   program to check whether a number is palindrome or not.
4. 1221  
5. 4) wap to find factorial of a number
6. 5=1*2*3*4*5=120
7. 5) wap to find power of a no.
8. n=2
9.   p=3
10.  8
11. 6)wap to find wheater the no is prime or not
12.
13.
14. Write a   program to print all natural numbers from 1 to n. - using while loop
15. Write a   program to print all natural numbers in reverse (from n to 1). - using while loop
16. Write a  program to print all alphabets from a to z. - using while loop
17. Write a   program to print all even numbers between 1 to 100. - using while loop
18. Write a   program to print all odd number between 1 to 100.
19. Write a   program to find sum of all natural numbers between 1 to n.
20. Write a  program to find sum of all even numbers between 1 to n.
21. Write a   program to find sum of all odd numbers between 1 to n.
22. Write a  program to print multiplication table of any number.
23. Write a   program to count number of digits in a number.
24. Write a  program to find first and last digit of a number.
25. Write a   program to find sum of first and last digit of a number.
26. Write a   program to swap first and last digits of a number.
27. Write a   program to calculate sum of digits of a number.
28. Write a  program to calculate product of digits of a number.
29. Write a   program to enter a number and print its reverse.
30. Write a   program to check whether a number is palindrome or not.
31. Write a  program to find frequency of each digit in a given integer.  1221123
32. Write a  program to enter a number and print it in words.
33. Write a  program to print all ASCII character with their values.
34. Write a  program to find power of a number using for loop.
35. Write a  program to find all factors of a number.
36. Write a  program to calculate factorial of a number.
37. Write a  program to check whether a number is Prime number or not.
38. Write a  program to print all Prime numbers between 1 to n.
39. Write a  program to find sum of all prime numbers between 1 to n

==========================================================================================================================================================================================================================================================================================================================================
6)
 -----    *
 ----  *     *
 --- *    *    *
 -- *   *     *    *
 -*    *    *    *    *
     *    *   *     *
       *   *   *  *
           *  *  *
             *  *
                *  

WAP to print the following statement?

1 2 3 4 5
1 2 3 4
1 2 3
1 2
1
............................................................................................

A a B b C
A a B b
A a B
A a
A
..................................................................................................




1 2 3 4 5
5 4 3 2
1 2 3
5 4
1
.......................................................................




ASSIGNMENT:-

1 0 0 1 0
1 0 0 1
1 0 0
1 0
1












54321
4321
321
21
1

55555
4444
333
22
1









*
**
***
****
***
**
*







-------------------------------------------------


*
***
*****
***
*


1 2 3 4 5
1 2 3 4
1 2 3
1 2
1
A a B b C
A a B b
A a B
A a
A

1 2 3 4 5
1 2 3 4
1 2 3
1 2
1

A a B b C
A a B b
A a B
A a
A




1 0 0 1 0
1 0 0 1
1 0 0
1 0
 1


A B C D E
B C D E
C D E
D E
E




12345
1234
123
12
1

12345
5432
123
54
1

ABCDE
BCDE
CDE
E


1 2 3 4 5
5 4 3 2
1 2 3
5 4
1

1 2 3 4 5
1 2 3 4
1 2 3
1 2
1


A a B b C
A a B b
A a B
A a
A


1 2 3 4 5
5 4 3 2
1 2 3
5 4
1

1 0 0 1 0
1 0 0 1
1 0 0
1 0
1



A B C D E
B C D E
C D E
D E
E
 











1)1,2,3,4,....10
2) 2 4 6 8 10
3) 1 3 5 7 9
4) 1 4 9 16 25
5) 1+2+3+4...10=SUM55
6) WAP TO PRINT TABLE OF ANY NO
7 wap to print factrial of any no  5

C programs are frequently asked in the interview. These programs can be asked from basics, array, string, pointer, linked list, file handling etc. Let's see the list of c programs.

1) Fibonacci Series

Write a c program to print fibonacci series without using recursion and using recursion.

Input: 10

Output: 0 1 1 2 3 5 8 13 21 34

2) Prime number

Write a c program to check prime number.

Input: 44

Output: not prime number

Input: 7

Output: prime number

3) Palindrome number

Write a c program to check palindrome number.

Input: 329
121
1331


Output: not palindrome number

Input: 12321

Output: palindrome number

4) Factorial

Write a c program to print factorial of a number.

Input: 5

Output: 120

Input: 6

Output: 720

5) Armstrong number

Write a c program to check armstrong number.

Input: 153

Output: armstrong

Input: 22

Output: not armstrong




 ***********************************************************

infinite  while loop example using a boolean value

<html>
<font color="green">
<script>
var i=1;
var a="true";
while(a)
{
    if(i>=10)
         a=false;
    document.write("<br>"+i);
   i++;
}
</script>
</html>
WAP to create a table of any number using infinite Loop:-

<html>
<font color="green">
<script>
var num,i=1;
num=parseInt(prompt("Enter any no."));3
       while(true)
       {
         document.write("<br>"+num*i);
          if(i>=10)
           break;
          i++;
       }
</script>
</html>

limitation of while loop:-
1)  Complex structure hence it can not be managed in nested sequence easily.
2)  take more process time to program execution  as compared to for loop          
   

 1.2 for -

using this we can contain all sub-statements using for statements, it provides a simple syntax structure as compared to a while and do-while loop.
for loop is mostly used to create a finite condition-based program.
flow of for loop:-
      1        2              4
for(init; condition; iteration)
 {
        3
        statement;
 }
var i;
for(i=1; i<=10;i++)
           document.write(i+"<br>");

i=1     1
i=2     2 i=3
3  4
4 5

finite for loop example:-

modified for loop
<html>
<font color="green">
<script>
var num,i=1 ;
num=Number(prompt("enter no"));3
for( ;i<=10; )
{   document.write(num+"*"+i+"="+(num*i)+"<br>");          
     i++;
}
 </script>
</html>
Infinite for loop example:-
<html>
<font color="green">
<script>
var num,i=1 ;
num=Number(prompt("enter no"));2
 for( ; ;)
{
   document.write(num+"*"+i+"="+(num*i)+"<br>");          
       if(i>=10)
            break;
       i++
}
 </script>
</html>


<html>
<body>
<script>
      var s = '';
      for (var i = 65; i <= 90; i++)
            s += String.fromCharCode(i);
   document.write(s);

</script>
</body>
</html>


---------------------------------------------------------


Nested For Loop:-   We will write more than one for loop using a nested sequence, it Contains a collection of outer for loop and multiple inner for loop.

# # # #
# # # #
# # # #
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5


<html>
<body>
<script>
var i,j;
for(i=1;i<=3;i++) i=3
{
     for(j=1;j<=4;j++)j=1
    {
          document.write("  #  ");
    }
   document.write("<br>");
}
</script>
</body>
</html>
# # # #
# # # #
# # # #

1 2 3 4
1 2 3 4
1 2 3 4

<html>
<body>
<script>
var i,j;
for(i=1;i<=3;i++)
{
     for(j=1;j<=4;j++)
    {
          document.write("# &emsp;" );
    }
   document.write("<br>");
}
</script>
</body>
</html>

#  #  # #
#  # # #
#  # # #

2 4 6 8 10
2 4 6 8 10
2 4 6 8 10
<html>
<body>
<script>
var i,j;
for(i=1;i<=3;i++)
{
     for(j=1;j<=4;j++)
    {
          document.write(j );
    }
   document.write("<br>");
}
</script>
</body>
</html>


i=1 j=1 j=2 j=3 j=4
i=2 j=1 j=2 j=3 j=4
i=3
for(init;condition;iteration)
{
   for(init;condition;iteration)
   {
            Statement;

  }
 
}
1)
*
* *
* * *
* * * *
* * * * *

2)
* * * * *
* * * *
* * *
* *
*
3)
1 2 3 4 5
1 2 3 4
1 2 3
1 2
1
4)
1
2 2
3 3 3
4 4 4 4
5 5 5 5 5
5)
-----       *
----    *      *
---   *     *        *
--  *     *       *        *
-*      *       *      *      *

<html>
<body>
<script>
     var i,j,k;
for(i=1;i<=5;i++)  
{
     for(j=5;j>=i;j--)
    {
          document.write("&ensp;");
    }
    for(k=1;k<=i;k++)
    {
          document.write("*&ensp;");
    }
   
   document.write("<br>");
}
</script>
</body>
</html>

==========================================================================================================================================================================================================================================================================================================================================================================================================
vandana malviya <vandana2022malviya@gmail.com>
Tue, Oct 18, 2022, 2:00 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

<HTML>
<HEAD>
<script language="JavaScript">
function r()
{
document.bgColor="red";
document.fgColor="yellow";
}
function g()
{
document.bgColor="green";
document.fgColor="white";

}
function b()
{
document.bgColor="blue";
document.fgColor="lime";

}
</script>
<body>
<h1 align="center">SHIVA CONCEPT SOULATION WELCOME </h1>
<center>
<input type="button" name="r1" value="red" onclick="r()">
<input type="button" name="g1" value="green" onclick="g()">
<input type="button" name="b1" value="blue" onclick="b()">
</center>

</BODY>
</HTML>
===========

javaScript Array

JavaScript array is an object that represents a collection of similar type of
 elements.
There are 3 ways to construct array in JavaScript
1)By array literal
2)By creating instance of Array directly (using new keyword)
3)By using an Array constructor (using new keyword)
a=10 b="amit" c="indore"
1) JavaScript array literal
The syntax of creating array using array literal is given below:

var arrayname=[value1,value2.....valueN];  

As you can see, values are contained inside [ ] and separated by , (comma).

<script>
var a=[11,22,33,44,55];
document.write(a[0]);
document.write(a[1]);
document.write(a[2]);
document.write(a[3]);
document.write(a[4]);
for(i=0;i<5;i++)
  document.write(a[i]);
</script>
-----------------------------------
program to add values of array
<!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">
   var a=[11,22,33,44,55],i,sum=0;
for(i=0;i<5;i++)
  {document.write("<br>"+a[i]);
      sum=sum+a[i];
  }
 document.write("<br>Sum "+sum);

</script>

</body>
</html>
 




<html>
<body>
<script>  
var a=[12,1,3,1,45,67];

for (i=0;i<a.length;i++){  
document.write(a[i] + "<br/>");  
}  

a.forEach((a,i)=>{ console.log(a)});
</script>  
</body>
</html>

var a=[11,22,33,44,55];  
 for (i=0;i<a.length;i++)  
   document.write(a[i] + "<br>");  
   console.log(a[i]);
 
  /*
var b=[];
 for (i=0;i<5;i++)  
   b[i]=prompt("Enter no");
 for (i=0;i<5;i++)  
    document.write(b[i] + "<br>");  
   
-------------------------------
<html>
<head>
<script type="text/javascript">
 
 var b=[],sum=0,i,avg;
 size=parseInt(prompt("Enter size of array"));
 for (i=0;i<size;i++)  
   b[i]=parseInt(prompt("Enter no"));

 for (i=0;i<size;i++)  
 {  document.write(b[i] + "<br>");  
  sum=sum+b[i];
  }

b.forEach((b,i)=>{console.log(b)});

  document.write("sum="+sum+"<br>");
  document.write("average="+sum/b.length);
</script>

</head>
<body>

</body>
</html>

---------------------------------



<html>
<body>
<script>  
var a=[11,22,33,44,55],sum=0,avg;

for (i=0;i<a.length;i++)
{  
document.write(a[i] + "<br/>");
sum=sum+a[i];
}  
avg=sum/a.length;
document.write("Total : " +sum+ "<br/>");
document.write("average : " +avg+ "<br/>");
</script>  
</body>
</html>
---------------------------
<!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">
var a=[],i,sum=0,avg,size;
size=parseInt(prompt("Enter array size"));
for(i=0;i<size;i++)
  {
         a[i]=parseInt(prompt("Enter   no"));
        document.write("<br>"+a[i]);
      sum=sum+a[i];
  }
  avg=sum/a.length;
  document.write("<br>Sum "+sum);
  document.write("<br>Average "+avg);

</script>

</body>
</html>
 


  <!DOCTYPE html>
<html>
<body bgcolor="cyan">
<script>
var b=[],num;
num=parseInt(prompt("Enter length of array"));

 for (i=0;i<num;i++)  
   b[i]=prompt("Enter no");
 for (i=0;i<b.length ;i++)  
    document.write(b[i] + "<br>");  
   
  </script>

</body>
</html>

</body>
</html>

--------------------------------------------

<html>  
<body>  
<script type="text/javascript">    
var b=[];
var sum=0,avg;
var size=parseInt(prompt("Enter no of student marks"));
 for (i=0;i<size;i++)  
  { b[i]=parseInt(prompt("Enter no"));
       sum=sum+b[i];
   }
   avg=sum/b.length;
 for (i=0;i<b.length;i++)  
    document.write(b[i] + "<br>");  
document.write("Sum="+sum+"<br>");
document.write("Average="+avg+"<br>");  
 

</script>
</body>  
</html>  

 







<!DOCTYPE html>
<html>
<head>
  <title></title>
 </head>
<body>
 <font size="15">
 <script type="text/javascript">
  var arr=[];
  var sum=0,avg,i;
 for (i=0;i<5;i++)  
    {arr[i]=parseFloat(prompt("Enter no"));
      sum=sum+arr[i];
    }
    avg=sum/arr.length;
for (i=0;i<arr.length;i++)  
    document.write(arr[i]+"<br>");
document.write("sum= "+sum+"<br>");
document.write("average= "+avg+"<br>");  
  </script>
</body>
</html>
a=10
b[i]=a[i]
1)wap program to copy 1 array into another
2)wap to find max and min value in array
3)wap to copy 1 array in to another in reverse order
4) wap to sort an array in assending and decending order
5)wap to print common elements  in array
6) wap to print prime elements in array


<html>
<body>
<script>  
var a=[] ,max,min,s;
s=parseInt(prompt("Enter limit of array"));
for (i=0;i<s;i++)
{
   a[i]=parseInt(prompt("Enter no"));
   document.write(a[i]+"<br/>");

}
max=min=a[0];
for (i=0;i<s;i++)
{        
if(a[i]>max)  
       max=a[i];
if(a[i]<min)  
       min=a[i];    
}  

document.write("max "+max+"<br/>");
document.write("min "+min+"<br/>");
</script>  
</body>
</html>

---------------------------------
<html>
<body>
<script>  
var a=[12,100,3,1,45,67] ,max,min;
max=min=a[0];
for (i=0;i<a.length;i++)
{        
if(a[i]>max)  
       max=a[i]; max=100
if(a[i]<min)  
       min=a[i];    min=1
}  

document.write("max "+max+"<br/>");
document.write("min "+min+"<br/>");
</script>  
</body>
</html>

var b=[],num,sum=0,avg,max,min;
num=parseInt(prompt("Enter number of students"));

 for (i=0;i<num;i++)  
   b[i]=parseInt(prompt("Enter marks of student"));
 max=b[0];
 min=b[0];
 for (i=0;i<b.length ;i++)  
    {  sum=sum+b[i];
      document.write(b[i] + "<br>");
      if(b[i]>max)
        max=b[i];
      if(b[i]<min)
        min=b[i];


    }
    avg=sum/b.length;
      document.write("total "+sum+ "<br>");  
      document.write("average "+avg+ "<br>");  
      document.write("Max   "+max+ "<br>");  
      document.write("Min   "+min+ "<br>");  

  </script>

</body>
</html>
<!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">
var b=[],a=[],n,sum=0;

n=parseInt(prompt("Enter size of array"));
 for (i=0;i<n;i++)  
   b[i]=Number(prompt("Enter no"));
 x=b.length;
 document.write("lenth"+x);
 x--;
 for (i=0;i<=n;i++)    
    {a[x]=b[i];
    x--;
    }
 for (i=0;i<n;i++)  
  document.write(b[i]+"<br>");
 
 for (i=0;i<n;i++)  
   document.write(a[i]+"<br>");
   
   
</script>
</body>
</html>

program to reverse array
<!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">
var i,j;
var a=new Array();
n=parseInt(prompt("Enter size of array"));
for(i=0;i<n;i++)
  a[i]=parseInt(prompt("Enter no"));

for(i=0;i<n;i++)
{
for(j=i+1;j<5;j++)
{
if(a[i]>a[j])        
{
t=a[i];
a[i]=a[j];
a[j]=t;
}
}
document.write(a[i]+"<br>");
}

for(i=0;i<5;i++)
{
//document.write(a[i]+"<br>");
}
</script>
</body>
</html>


 
2) JavaScript Array directly (new keyword)
The syntax of creating array directly is given below:

var arrayname=new Array();  
Here, new keyword is used to create object of array.

nm=new Array("preeti","priyanka","neha","jenny");
for(i=0;i<nm.length;i++)
  document.write(nm[i]);

<html>
<body>
<script>  
var i;  
var emp = new Array();
for (i=0;i<5;i++)  
 emp[i]=prompt("Enter employee name");
 
for (i=0;i<emp.length;i++){  
document.write(emp[i] + "<br>");  
}  
</script>  
</body>
</html>
====================================




Let's see the example of creating array directly.
<html>
<body>
<script>  
var i;  
var emp = new Array();  
emp[0] = "Arun";  
emp[1] = "Varun";  
emp[2] = "John";    
for (i=0;i<emp.length;i++){  
document.write(emp[i] + "<br>");  
}  
</script>  
</body>
</html>
3) JavaScript array constructor (new keyword)
Here, you need to create instance of array by passing arguments in constructor so that we don't have to provide value explicitly.
<html>
<body>
<script>  

var emp=new Array("Jai","Vijay","Smith");  
for (i=0;i<emp.length;i++){  
document.write(emp[i] + "<br>");  
}  
</script>  
</body>
</html>


=========================
<!DOCTYPE html>
<html>
<head>
<title>JS Bin</title>
<style>
body {padding-top:50px}
</style>
</head>
<body>
<input type="text" id="text1"></input>
<input type="button" id="button1" value="Add" onclick="add_element_to_array();"></input>
<input type="button" id="button2" value="Display" onclick="display_array();"></input>
<div id="Result"></div>

<script>
var x = 0;
var array = Array();

function add_element_to_array()
{
 array[x] = document.getElementById("text1").value;
 alert("Element: " + array[x] + " Added at index " + x);
 x++;
 document.getElementById("text1").value = "";
}
function display_array()
{   var e = "<hr>";    
   for (var y=0; y<array.length; y++)
   {
     e += "Element " + y + " = " + array[y] + "<br>";
   }
   document.getElementById("Result").innerHTML = e;
}
</script>
</body>
</html>
========================================
<html>
    <head>
        <meta charset="utf-8">
        <title>Array</title>
        <script language="javascript">
var nm,ct,sl;
var i=0;
nm=new Array("preeti","priyanka","neha","jenny","sushil","yash");
ct=new Array("indore","bombay","pune","delhi","calcutta","surat");
sl=new Array("83300","25000","780000","560000","150000","50000");
function sf()
{
document.f1.t1.value=nm[0];
document.f1.t2.value=ct[0];
document.f1.t3.value=sl[0];
i=0;
}
function add(){
    var v1=document.f1.t1.value;
    var v2=document.f1.t2.value;
    var v3=document.f1.t3.value;
    nm.push(v1)
    ct.push(v2)
    sl.push(v3)
}
function remove(){
    nm.pop()
    ct.pop()
    sl.pop()
}
function slast()
{    
document.f1.t1.value=nm[nm.length-1];
document.f1.t2.value=ct[ct.length-1];
document.f1.t3.value=sl[sl.length-1];
i=nm.length-1;
}
function pre()
{i=i-1;

if(i<0)
{
//i=0;
alert("no more pre record");
}
else
{
document.f1.t1.value=nm[i];
document.f1.t2.value=ct[i];
document.f1.t3.value=sl[i];
}

}

function next()
{
i=i+1;
if(i>=nm.length)
{
i=nm.lenght-1;
alert("no more records");
}
else
{
document.f1.t1.value=nm[i];
document.f1.t2.value=ct[i];
document.f1.t3.value=sl[i];
}}

function display_array()
{   var ne = "<hr>",ce="<hr>",ec="<hr>";    
   
   for (var y=0; y<nm.length; y++)
   {
     ne +=  nm[y]+"&emsp;&emsp;"+ ct[y]+"&emsp;&emsp;"+sl[y]+"&emsp;&emsp;"+"<br>";
     ;  
   }
   document.getElementById("Result").innerHTML = ne ;
}


</script>
    </head>

    <body bgcolor="pink">
        <font size="15">
            Shiva-Concept Soulation
        </font>
        <form name="f1">
            NAME:-<input type="text" name="t1"><br><br>
            CITY:-<input type="text" name="t2"><br><br>
            SALARY:-<input type="text" name="t3"><br><br>
            <input type="button" value="show first" onClick="sf()">
            <input type="button" value="show last" onClick="slast()">
            <input type="button" value="previous" onClick="pre()">
            <input type="button" value="next" onClick="next()">
            <input type="button" value="add" onClick="add()">
            <input type="button" value="remove" onClick="remove()">
            <input type="button" id="button2" value="Display" onclick="display_array();"></input>

        </form>
        <div id="Result"></div>
    </body>
</html>
=========================================




<html>
<head>
<script>
nm= Array();
var size=Number(prompt("Enter size of array"));
for(i=0;i<size;i++)
  nm[i]=prompt("Enter name ");  
for(i=0;i<nm.length;i++)
  document.write(nm[i]+"<br>");

</script>
</head>
<body>
</body>
</html>

<html>
<head>
<script>
nm= Array();
var s,flag=1;

var size=Number(prompt("Enter size of array"));
for(i=0;i<size;i++)
  nm[i]=parseInt(prompt("Enter no "));  
for(i=0;i<nm.length;i++)
  document.write(nm[i]+"<br>");
s=parseInt(prompt("Enter search element"));
for(i=0;i<size;i++)
{
if(s==nm[i])
{   flag=1;
break;
}
else
flag=0;
}
if (flag==1)
document.write(nm[i]+" Found at location"+(i+1));
else
document.write(" not Found");
</script>
</head>
<body>



1) copy  1 array into another
2) search an value in array and print its position
3) reverse an array
4) sort an array(asending or decending order)

===================================================================================================================================================================================================================================================================================================================================<html>
    <head>
        <meta charset="utf-8">
        <title>Array</title>
        <script language="javascript">
var nm,ct,sl;
var i=0;
nm=new Array("preeti","priyanka","neha","jenny","sushil","yash");
ct=new Array("indore","bombay","pune","delhi","calcutta","surat");
sl=new Array("83300","25000","780000","560000","150000","50000");
function sf()
{
document.f1.t1.value=nm[0];
document.f1.t2.value=ct[0];
document.f1.t3.value=sl[0];
i=0;
}
function add(){
    var v1=document.f1.t1.value;
    var v2=document.f1.t2.value;
    var v3=document.f1.t3.value;
    nm.push(v1)
    ct.push(v2)
    sl.push(v3)
}
function remove(){
    nm.pop()
    ct.pop()
    sl.pop()
}
function slast()
{    
document.f1.t1.value=nm[nm.length-1];
document.f1.t2.value=ct[ct.length-1];
document.f1.t3.value=sl[sl.length-1];
i=nm.length-1;
}
function pre()
{i=i-1;

if(i<0)
{
//i=0;
alert("no more pre record");
}
else
{
document.f1.t1.value=nm[i];
document.f1.t2.value=ct[i];
document.f1.t3.value=sl[i];
}

}

function next()
{
i=i+1;
if(i>=nm.length)
{
i=nm.lenght-1;
alert("no more records");
}
else
{
document.f1.t1.value=nm[i];
document.f1.t2.value=ct[i];
document.f1.t3.value=sl[i];
}}

function display_array()
{   var ne = "<hr>",ce="<hr>",ec="<hr>";    
   
   for (var y=0; y<nm.length; y++)
   {
     ne +=  nm[y]+"&emsp;&emsp;"+ ct[y]+"&emsp;&emsp;"+sl[y]+"&emsp;&emsp;"+"<br>";
     ;  
   }
   document.getElementById("Result").innerHTML = ne ;
}


</script>
    </head>

    <body bgcolor="pink">
        <font size="15">
            Shiva-Concept Soulation
        </font>
        <form name="f1">
            NAME:-<input type="text" name="t1"><br><br>
            CITY:-<input type="text" name="t2"><br><br>
            SALARY:-<input type="text" name="t3"><br><br>
            <input type="button" value="show first" onClick="sf()">
            <input type="button" value="show last" onClick="slast()">
            <input type="button" value="previous" onClick="pre()">
            <input type="button" value="next" onClick="next()">
            <input type="button" value="add" onClick="add()">
            <input type="button" value="remove" onClick="remove()">
            <input type="button" id="button2" value="Display" onclick="display_array();"></input>

        </form>
        <div id="Result"></div>
    </body>
</html>
=========================================




<html>
<head>
<script>
nm= Array();
var size=Number(prompt("Enter size of array"));
for(i=0;i<size;i++)
  nm[i]=prompt("Enter name ");  
for(i=0;i<nm.length;i++)
  document.write(nm[i]+"<br>");

</script>
</head>
<body>
</body>
</html>

<html>
<head>
<script>
nm= Array();
var s,flag=1;

var size=Number(prompt("Enter size of array"));
for(i=0;i<size;i++)
  nm[i]=parseInt(prompt("Enter no "));  
for(i=0;i<nm.length;i++)
  document.write(nm[i]+"<br>");
s=parseInt(prompt("Enter search element"));
for(i=0;i<size;i++)
{
if(s==nm[i])
{   flag=1;
break;
}
else
flag=0;
}
if (flag==1)
document.write(nm[i]+" Found at location"+(i+1));
else
document.write(" not Found");
</script>
</head>
<body>



1) copy  1 array into another
2) search an value in array and print its position
3) reverse an array
4) sort an array(asending or decending order)


------------------------------------
</script>
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Arrays</h2>

<p id="test"></p>

<script>
const city = ["delhi", "bombay", "pune"];
document.getElementById("test").innerHTML = city;
</script>

</body>
</html>

---------------------------
Sorting an Array
The sort() method sorts an array alphabetically:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>
<p>The sort() method sorts an array alphabetically:</p>
 
<script>
fruits = ["Banana", "Orange", "Apple", "Mango"];
document.write(fruits);
fruits.sort();

document.write("<br>"+fruits);
</script>

</body>
</html>
-------------------------------
Reversing an Array
The reverse() method reverses the elements in an array.

You can use it to sort an array in descending order:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort Reverse</h2>

<p>The reverse() method reverses the elements in an array.</p>
<p>By combining sort() and reverse() you can sort an array in descending order:</p>


<script>
fruits = ["Banana", "Orange", "Apple", "Mango"];
document.write(fruits);
// Then reverse it:
fruits.sort();
fruits.reverse();

document.write(fruits);
</script>

</body>
</html>
-----------------------------

Numeric Sort
By default, the sort() function sorts values as strings.

This works well for strings ("Apple" comes before "Banana").

However, if numbers are sorted as strings, "25"  is bigger than "100", because "2" is bigger than "1".

Because of this, the sort() method will produce incorrect result when sorting numbers.

You can fix this by providing a compare function:


The Compare Function
The purpose of the compare function is to define an alternative sort order.

The compare function should return a negative, zero, or positive value, depending on the arguments:

function(a, b){return a - b}
When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.
a=25 b=100 a>b =pos
If the result is negative a is sorted before b.

If the result is positive b is sorted before a.
a<b  =neg
If the result is 0 no changes are done with the sort order of the two values.
a==b =0
Example:

The compare function compares all the values in the array, two values at a time (a, b).

When comparing 40 and 100, the sort() method calls the compare function(40, 100).

The function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.

You can use this code snippet to experiment with numerically and alphabetically sorting:







<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Array Sort</h2>
<p>Sort the array in ascending order:</p>
<script>
 points = [40, 100, 1, 5, 25, 10];
document.write("<br>"+points);  
points.sort(function(a, b){return a - b});
document.write("Assending order"+points+"<br>");
points.sort(function(a, b){return b - a});
document.write("Desending order"+points+"<br>");
</script>

</body>
</html>




-------------------------------------------------

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>

<p>Click the buttons to sort the array alphabetically or numerically.</p>

<button onclick="myFunction1()">Sort Alphabetically</button>
<button onclick="myFunction2()">Sort Numerically</button>

<p id="demo"></p>

<script>
  points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;  

function myFunction1() {
  points.sort();
  document.write(points);
}
function myFunction2() {
  points.sort(function(a, b){return a - b});
  document.write(points);
}
</script>

</body>
</html>

-------------------

Associative Array in JavaScript
In JavaScript, arrays with named indexes are not supported. Arrays are known to use numbered indexes however, objects in JavaScript use named indexes.
Let's understand it in simple words, when values are assigned to the keys in a variable of array, it transforms the array in to an object and loses the attributes and methods of an array.
These types of arrays are known as Associative Arrays in JavaScript.
Here is an Example to understand the Associative array:

<script>
var arr = new Object();
arr["one"] = 1;
arr["two"] = 2;
arr["three"] = 3;
for(var i in arr)
{
     document.write(i + "=" + arr[i] + '
');
}
</script>
Output :
one=1
two=2
three=3
Multi-Dimensional Array
In multi-Dimensional arrays, an array is used inside of an array.
Multidimensional arrays are known to have more than 2 dimensions.
In most cases, 2 dimensions are enough though, there are some places where 3 dimensions can be used like during 3D operations, physics calculations, etc.

Let's understand the multi-dimensional arrays with an example:

<script>
var array=Array(Array(10,11),Array(12,13))
for (var i = 0; i < array.length; i++)
{
for (var j = 0; j < array[i].length; j++)
{
document.write(array[i][j]+" ");
}  
document.write("<br>");
}
</script>
 
Ooutput:
10 11
12 13
Let's understand through 2nd example

 <script>
 // Create one dimensional array
  var arr = new Array(2);
document.write("Creating 2D array <br>");
// Loop to create 2D array using 1D array
for (var i = 0; i < arr.length; i++)
{
    arr[i] = new Array(2);
}
 
var h = 0;
 
// Loop to initilize 2D array elements.
for (var i = 0; i < 2; i++)
{
    for (var j = 0; j < 2; j++)
{
        arr[i][j] = h++;
    }
}
 
// Loop to display the elements of 2D array.  
for (var i = 0; i < 2; i++)
{
    for (var j = 0; j < 2; j++)  
{
        document.write(arr[i][j] + " ");
    }
    document.write("<br>");
}
</script>
 
Ooutput:
Creating 2D array
0 1
2 3






JavaScript Array Methods
1. map( )
This method creates a new array with the results of calling a provided function on every element in this array.

2. filter( )
This method creates a new array with only elements that passes the condition inside the provided function.

3. sort( )
This method is used to arrange/sort array’s elements either in ascending or descending order.

4. forEach( )
This method helps to loop over array by executing a provided callback function for each element in an array.

5. concat( )
This method is used to merge two or more arrays and returns a new array, without changing the existing arrays.

6. every( )
This method checks every element in the array that passes the condition, returning true or false as appropriate.

7. some( )
This method checks if at least one element in the array that passes the condition, returning true or false as appropriate.

8. includes( )
This method checks if an array includes the element that passes the condition, returning true or false as appropriate.

9. join( )
This method returns a new string by concatenating all of the array’s elements separated by the specified separator.

10. reduce( )
This method applies a function against an accumulator and each element in the array to reduce it to a single value.

11. find( )
This method returns the value of the first element in an array that pass the test in a testing function.

12. findIndex( )
This method returns the index of the first element in an array that pass the test in a testing function.

13. indexOf( )
This method returns the index of the first occurrence of the specified element in the array, or -1 if it is not found.

14. fill( )
This method fills the elements in an array with a static value and returns the modified array.

15. slice( )
This method returns a new array with specified start to end elements.

16. reverse( )
This method reverses an array in place. Element at last index will be first and element at 0 index will be last.

17. push( )
This method adds one or more elements to the end of array and returns the new length of the array.

18. pop( )
This method removes the last element from the end of array and returns that element.

19. shift( )
This method removes the first element from an array and returns that element.

20. unshift( )
This method adds one or more elements to the beginning of an array and returns the new length of the array.

Javascript Array Methods
The JavaScript array methods and various properties that help the developers to handle arrays with efficiency and easiness. One can get the value of a property and methods by specifying arrayname.property and the output of a method by specifying arrayname.method().
There are various uses of the array methods from joining two arrays to creating an array from the object. They are basically used to store multiple values in a single variable.
There are various methods of arrays in JavaScript and they are known to perform various operations in the JavaScript language.
Array Methods in JavaScript
Here is the list of Array methods in JavaScript along with their description and Examples
Methods Description
concat() This method returns a new array object that contains two or more merged arrays.
copywithin() This method copies the part of the provided array with its own elements and returns the modified array.
every() This method determines whether all the elements of an array are satisfying the given function conditions.
fill() This method fills elements into an array with static values.
filter() This method returns the new array containing the elements that pass the given function conditions.
find() This method returns the value of the first element in the provided array that satisfies the specified condition.
findIndex() This method returns the index value of the first element in the provided array that satisfies the specified condition.
forEach() This method invokes the provided function once for each element of an array.
includes() This method checks whether the given array contains the specified element.
indexOf() This method searches the specified element in the provided array and returns the index of the first match.
join() This method joins the elements of an array as a string.
lastIndexOf() This method searches the specified element in the provided array and returns the index of the last match.
map() This method calls the specified function for every array element and returns the new array
pop() This method removes and returns the last element of an array.
push() This method adds one or more elements to the end of an array.
reverse() This method reverses the elements of provided array.
shift() This method removes and returns the first element of an array.
slice() This method returns a new array containing the copy of the part of the provided array.
sort() This method returns the element of the provided array in a sorted order.
splice() This method add/remove elements to/from the provided array.
unshift() This method adds one or more elements in the beginning of the provided array.
Here are the syntax and examples of the methods mentioned in the above table:
1. Array Concat() method in JavaScript
Syntax:
array.concat(arr1,arr2,....,arrn)  
Here is an example to easily understand the Concat() method:

<script>
var arr1=["hey","How","are"];
var arr2=["You","1","2"];
var result=arr1.concat(arr2);
document.writeln(result);
</script>
Output :
hey,How,are,You,1,2
2. Array CopyWithin() method in JavaScript
Syntax :
 array.copyWithin(target, start, end)
Here is an example to easily understand the CopyWithin() method:

<script>
var arr=["PHPTPOINT","BEST","PHP TRAINING","INSTITUTE"]
// place from 0th position, the elements between 1st and 3rd position.
var result=arr.copyWithin(0,1,3);
document.writeln(result);
</script>
Output :
BEST,PHP TRAINING,PHP TRAINING,INSTITUTE
3. Array Every() method in JavaScript
Syntax :

array.every(callback(currentvalue,index,arr),thisArg)
Here is an example to easily understand the Every() method:
<script>
var marks=[10,50,25,97,60];
function check(value)
{
  return value>50;  //return false, as marks[4]=20
}
document.writeln(marks.every(check));
</script>
Output :
false
4. Array fill() method in JavaScript
Syntax :

arr.fill(value[, start[, end]])  
Here is an example to understand the fill() method:

<script>
var arr=["Java","PHP","Python"];
var result=arr.fill("PHPTPOINT");
document.writeln(arr);
</script>
Output :
PHPTPOINT,PHPTPOINT,PHPTPOINT
5. Array Filter() method in JavaScript
Syntax :

array.filter(callback(currentvalue,index,arr),thisArg
Here is an example to easily understand the filter() method:

<script>
var marks=[56,58,95,17,30];
function check(value)
{
  return value>50;  
}
document.writeln(marks.filter(check));
</script>
Output :
56,58,95
6. Array Find() method in JavaScript
Syntax :
 array.find(callback(value,index,arr),thisArg)
Here is an example to easily understand the find() method:

<script>
var arr=[7,20,15,30,95];
var result=arr.find(x=>x>50);
document.writeln(result)
</script>
Output :
95
7. Array Find Index() Method in JavaScript
Syntax :
 array.findIndex(callback(value,index,arr),thisArg)
Here is an example of find index() method:

<script>
var arr=[50,62,99,18,13];
var result=arr.findIndex(x=>x>50);
document.writeln(result)
</script>
Output :
1
8. Array forEach() method in JavaScript
Syntax :

array.forEach(callback(currentvalue,index,arr),thisArg)  
Here is an example for understanding the forEach() method:

<script>
var arr = ['PHPTPOINT', 'is', 'the best'];
arr.forEach(function(fetch) {
  document.writeln(fetch);
});
</script>
Output :
PHPTPOINT is the best
9. Array includes() method in JavaScript
Syntax :
array.includes(element,start)  
Here is an example for understanding the includes() method:

<script>
var arr=["20","90","100"]
var result=arr.includes("10");
document.writeln(result);
</script>
Output :
false
10. Array indexOf() method in JavaScript
Syntax :

array.indexOf(element,index)  
Here is an example to understand the indexOf() method:
<script>
var arr=["20","21","23","95","68"];
var result= arr.indexOf("21");
document.writeln(result);
</script>
Output :
1
11. Array join() method in JavaScript
Syntax :

 array.join(separator)
Here is an example to understand the join() method:
<script>
var arr=["Ferrari","possess","6000CC"]
var result=arr.join()
document.write(result);
</script>
Output :
Ferrari,possess,6000CC
12. Array lastIndexOf() method in JavaScript
Syntax :

array.lastIndexOf(element,index)  
Here is an example to understand the lastIndexOf() method:

<script>
var arr=["20","25","25","95","80"];
var result= arr.lastIndexOf("25");
document.writeln(result);
</script>
Output :
2
13. Array map() method in JavaScript
Syntax :

array.map(callback(currentvalue,index,arr),thisArg)
Here is an example to understand the map() method:

<script>
var arr=[5.1,9.9,7.7];
var result=arr.map(Math.round);
document.writeln(result);
</script>
Output :
5,10,8
14. Array pop() method in JavaScript
Syntax :

 array.pop()  
Here is an example to understand the pop() method:

<script>
var arr=["BEST","IS THE","PHPTPOINT"];
var len=arr.length;
for(var x=1;x<=len;x++)
  {
document.writeln("Extracted element: "+arr.pop()+"<br>");
  }
</script>
Output :
Extracted element: PHPTPOINT
Extracted element: IS THE
Extracted element: BEST
15. Array push() method in JavaScript
Syntax :

 array.push(element1,element2....elementn)  
Here is an example to understand the push() method:

<script>
var arr=["Hey","There"];
arr.push("How's you?");
document.writeln(arr);
</script>
Output :
Hey,There,How's you?
16. Array reverse() method in JavaScript
Syntax :

 array.reverse()
Here is an example to understand the reverse() method:

<script>
var arr=["This","is","in reverse"];
var rev=arr.reverse();
document.writeln(rev);
</script>
Output :
in reverse,is,This
17. Array shift() method in JavaScript
Syntax :

 array. shift()  
Here is an example to understand the shift() method:

<script>
var arr=["Hello","THIS IS","SHIFT"];
var result=arr.shift();
document.writeln(result);
</script>
Output :
Hello
18. Array Slice() method in JavaScript
Syntax :

 array.slice(start,end)  
Here is an example to understand the slice() method:

<script>
var arr=["Hello","This","Is","Slice"]
var result=arr.slice(2,3);
document.writeln(result);
</script>
Output :
Is
19. Array sort() method in JavaScript
Syntax :

array.sort(compareFunction)
Here is an example to understand the sort() method:

<script>
var arr=["Apple","Nokia","Boolean","Lava"]
var result=arr.sort();
document.writeln(result);
</script>
Output :
Apple,Boolean,Lava,Nokia
20. Array splice() method in JavaScript
Syntax :

array.splice(start,delete,element1,element2,?,elementn)
Here is an example to understand the splice() method:

<script>
var arr=["Here","is","the"];
var result=arr.splice(3,1,"placement")
document.writeln(arr);
</script>
Output :
Here,is,the,placement
21. Array Unshift() method in JavaScript
Syntax :

array. unshift(element1,element2,....,elementn)  
Here is an example to understand the unshift() method:

<script>
var arr=["Is","Here"];
var result=arr.unshift("Shift");
document.writeln(arr);
</script>
Output :
Shift,Is,Here





<html>
<body>
<script>  
var a,n,i;  
a=1
n=parseInt(prompt(“Enter any no”))

do{
     a=a*i;
     i++;
}while (i<=n);  

document.write(a + "<br/>");  
</script>  
I=i+1    i++  i+=1  ++i

4) JavaScript for in loop

The JavaScript for in loop is used to iterate the properties of an object. We will discuss about it later.

JavaScript Functions
JavaScript functions are used to perform operations.

We can call JavaScript function many times to reuse the code.



Advantage of JavaScript function
There are mainly two advantages of JavaScript functions.
1. Code reusability: We can call a function several times so it save coding.
2. Less coding: It makes our program compact. We don’t need to write many lines of code each time to perform a common task.
________________________________________
Function Invocation
The code inside the function will execute when "something" invokes (calls) the function:

1)When an event occurs (when a user clicks a button)
2)When it is invoked (called) from JavaScript code
3)Automatically (self invoked)
 

JavaScript Function Syntax
The syntax of declaring function is given below.




  function functionName([arg1, arg2, ...argN]){  
  //code to be executed  
  }  
JavaScript Functions can have 0 or more arguments.
 
A)default or no argument function

JavaScript Function Example
function in JavaScript that does not has arguments.
<html>
<body>
              <script>  
function test()
               {  
alert("hello! this is default function");  
}  
</script>  

<input type="button" onclick="test()" value="call function"/>  

</body>
</html>

<html>
<body>
              <script>  
function add(){  
var a,b,c;
                   a=parseInt(prompt("Enter 1st no");
                   b=parseInt(prompt("Enter 2nd no");
c=a+b;
                   alert("Add"+c);
}  
</script>  

<input type="button" onclick="add()" value="call function"/>  

</body>
</html>
==================
<html>
<body>
              <script>  
function table(){  
var n,i;
                   n=parseInt(prompt("Enter  no");
for (i=1;i<=10;i++)
                         document.write(n*i);
}  
</script>  

<input type="button" onclick="table()" value="table function"/>  

</body>
</html>









types
1)default

<html>
<head>
</head>
<body>
<script>  
function  test()
{  
alert("welcome");  
}  
function  india()
{  
alert("i m in india");  
}  
function  usa()
{  
alert("i m in usa");  
}  
function add()
{
       var a ,b ,c;
       a=parseInt(prompt("Enter a"));
       b=parseInt(prompt("Enter b"));      
       c=a+b;
       alert(c);

}
test();
usa() ;
india();
add();
</script>
 
 

</body>
</html>




CALL BY VALUE


I)FUNCTION WHICH TAKE THE ARGUMENT BUT NOT RETURN THE VALUE

<html>
<body>
<script>  
function  cube(a)
{  
alert(a*a*a);  
}  
</script>  
<form>  

<input type="button" value="click" onclick="cube(4)"/>  
</form>  
</body>
</html>
---------------------------------
<html>
<body>
<script>  
function  cube(number)
{  
alert(number*number*number);  
}  
var n;
n=parseInt(prompt("Enter no"));
cube(n)//call
</script>
</body>
</html>

-----------------------------------------------
CALL BY VALUE
(II) function which take the argument  and also return the value

<html>
<body>
<script>  
function  cube(number)5
{  
return(number*number*number);  
}  
var n;
n=parseInt(prompt("Enter no")); 5
x=cube(n);
document.write("ans"+x);
OR
document.write(cube(n));

</script>
</body>
</html>

(ii)DEFAULT WITH RETURN VALUE
<script>  
function Info(){  
return "hello shivaconceptsoulation! How r u?";  
}  
</script>  
<script>  
document.write(Info());  
</script>  

Output of the above example
hello shivaconceptsoulation! How r u?



<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Functions</h2>
<p>This example calls a function which performs a calculation and returns the result:</p>

<p id="testid"> </p>
<script>
var x = test(2, 3);
document.getElementById("testid").innerHTML = x;

function test(a, b)
{
  return a * b;
}
</script>
</body>
</html>

<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Functions</h2>
<p>This example calls a function which performs a calculation and returns the result:</p>

<p>swapnil<span id="testid"> </span></p >
<script>
var x = test(2, 3);
document.getElementById("testid").innerHTML = x;

function test(a, b)
{
  return a * b;
}
</script>
</body>
</html>

========================
wap to sort an array using funcion
function which take arguments as array and also return an sorted array
<!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">  
  function sort(arr)
  {
     
    var t;
    for (i=0;i<arr.length;i++)
    {  for (j=i+1;j<arr.length;j++)
       {  if ( arr[i]>arr[j] )
          {  
              t=arr[i];
              arr[i]=arr[j];
              arr[j]=t;

           }
    }
  }
    return arr;
  }
    var   arr=[12,54,23,78,144],y;
    y=sort(arr);
  document.write(y);
</script>
</body>
</html>

====================================




The () Operator Invokes the Function
Using the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.

Accessing a function without () will return the function object instead of
 the function result.


Functions Used as Variable Values
Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.


<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Functions</h2>
<p id="test"></p>
<script>
document.getElementById("test").innerHTML =
"The temperature is " + toCelsius(77) + " Celsius";

function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}
</script>

</body>
</html>

============================================================================================================================================================================================================================



Conversation opened. 1 read message.

Skip to content
Using Gmail with screen readers
vandana2022malviya@gmail.com 
18 of 30
Today class
Inbox

vandana malviya <vandana2022malviya@gmail.com>
Thu, Oct 20, 2022, 7:59 AM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

Today i m on leave...ur class will continue. From tomorrow 

On Wed, 19 Oct, 2022, 2:03 pm vandana malviya, <vandana2022malviya@gmail.com> wrote:
<html>
    <head>
        <meta charset="utf-8">
        <title>Array</title>
        <script language="javascript">
var nm,ct,sl;
var i=0;
nm=new Array("preeti","priyanka","neha","jenny","sushil","yash");
ct=new Array("indore","bombay","pune","delhi","calcutta","surat");
sl=new Array("83300","25000","780000","560000","150000","50000");
function sf()
{
document.f1.t1.value=nm[0];
document.f1.t2.value=ct[0];
document.f1.t3.value=sl[0];
i=0;
}
function add(){
    var v1=document.f1.t1.value;
    var v2=document.f1.t2.value;
    var v3=document.f1.t3.value;
    nm.push(v1)
    ct.push(v2)
    sl.push(v3)
}
function remove(){
    nm.pop()
    ct.pop()
    sl.pop()
}
function slast()
{    
document.f1.t1.value=nm[nm.length-1];
document.f1.t2.value=ct[ct.length-1];
document.f1.t3.value=sl[sl.length-1];
i=nm.length-1;
}
function pre()
{i=i-1;

if(i<0)
{
//i=0;
alert("no more pre record");
}
else
{
document.f1.t1.value=nm[i];
document.f1.t2.value=ct[i];
document.f1.t3.value=sl[i];
}

}

function next()
{
i=i+1;
if(i>=nm.length)
{
i=nm.lenght-1;
alert("no more records");
}
else
{
document.f1.t1.value=nm[i];
document.f1.t2.value=ct[i];
document.f1.t3.value=sl[i];
}}

function display_array()
{   var ne = "<hr>",ce="<hr>",ec="<hr>";    
   
   for (var y=0; y<nm.length; y++)
   {
     ne +=  nm[y]+"&emsp;&emsp;"+ ct[y]+"&emsp;&emsp;"+sl[y]+"&emsp;&emsp;"+"<br>";
     ;  
   }
   document.getElementById("Result").innerHTML = ne ;
}


</script>
    </head>

    <body bgcolor="pink">
        <font size="15">
            Shiva-Concept Soulation
        </font>
        <form name="f1">
            NAME:-<input type="text" name="t1"><br><br>
            CITY:-<input type="text" name="t2"><br><br>
            SALARY:-<input type="text" name="t3"><br><br>
            <input type="button" value="show first" onClick="sf()">
            <input type="button" value="show last" onClick="slast()">
            <input type="button" value="previous" onClick="pre()">
            <input type="button" value="next" onClick="next()">
            <input type="button" value="add" onClick="add()">
            <input type="button" value="remove" onClick="remove()">
            <input type="button" id="button2" value="Display" onclick="display_array();"></input>

        </form>
        <div id="Result"></div>
    </body>
</html>
=========================================




<html>
<head>
<script>
nm= Array();
var size=Number(prompt("Enter size of array"));
for(i=0;i<size;i++)
  nm[i]=prompt("Enter name ");  
for(i=0;i<nm.length;i++)
  document.write(nm[i]+"<br>");

</script>
</head>
<body>
</body>
</html>

<html>
<head>
<script>
nm= Array();
var s,flag=1;

var size=Number(prompt("Enter size of array"));
for(i=0;i<size;i++)
  nm[i]=parseInt(prompt("Enter no "));  
for(i=0;i<nm.length;i++)
  document.write(nm[i]+"<br>");
s=parseInt(prompt("Enter search element"));
for(i=0;i<size;i++)
{
if(s==nm[i])
{   flag=1;
break;
}
else
flag=0;
}
if (flag==1)
document.write(nm[i]+" Found at location"+(i+1));
else
document.write(" not Found");
</script>
</head>
<body>



1) copy  1 array into another
2) search an value in array and print its position
3) reverse an array
4) sort an array(asending or decending order)


------------------------------------
</script>
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Arrays</h2>

<p id="test"></p>

<script>
const city = ["delhi", "bombay", "pune"];
document.getElementById("test").innerHTML = city;
</script>

</body>
</html>

---------------------------
Sorting an Array
The sort() method sorts an array alphabetically:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>
<p>The sort() method sorts an array alphabetically:</p>
 
<script>
fruits = ["Banana", "Orange", "Apple", "Mango"];
document.write(fruits);
fruits.sort();

document.write("<br>"+fruits);
</script>

</body>
</html>
-------------------------------
Reversing an Array
The reverse() method reverses the elements in an array.

You can use it to sort an array in descending order:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort Reverse</h2>

<p>The reverse() method reverses the elements in an array.</p>
<p>By combining sort() and reverse() you can sort an array in descending order:</p>


<script>
fruits = ["Banana", "Orange", "Apple", "Mango"];
document.write(fruits);
// Then reverse it:
fruits.sort();
fruits.reverse();

document.write(fruits);
</script>

</body>
</html>
-----------------------------

Numeric Sort
By default, the sort() function sorts values as strings.

This works well for strings ("Apple" comes before "Banana").

However, if numbers are sorted as strings, "25"  is bigger than "100", because "2" is bigger than "1".

Because of this, the sort() method will produce incorrect result when sorting numbers.

You can fix this by providing a compare function:


The Compare Function
The purpose of the compare function is to define an alternative sort order.

The compare function should return a negative, zero, or positive value, depending on the arguments:

function(a, b){return a - b}
When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.
a=25 b=100 a>b =pos
If the result is negative a is sorted before b.

If the result is positive b is sorted before a.
a<b  =neg
If the result is 0 no changes are done with the sort order of the two values.
a==b =0
Example:

The compare function compares all the values in the array, two values at a time (a, b).

When comparing 40 and 100, the sort() method calls the compare function(40, 100).

The function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.

You can use this code snippet to experiment with numerically and alphabetically sorting:







<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Array Sort</h2>
<p>Sort the array in ascending order:</p>
<script>
 points = [40, 100, 1, 5, 25, 10];
document.write("<br>"+points);  
points.sort(function(a, b){return a - b});
document.write("Assending order"+points+"<br>");
points.sort(function(a, b){return b - a});
document.write("Desending order"+points+"<br>");
</script>

</body>
</html>




-------------------------------------------------

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Array Sort</h2>

<p>Click the buttons to sort the array alphabetically or numerically.</p>

<button onclick="myFunction1()">Sort Alphabetically</button>
<button onclick="myFunction2()">Sort Numerically</button>

<p id="demo"></p>

<script>
  points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;  

function myFunction1() {
  points.sort();
  document.write(points);
}
function myFunction2() {
  points.sort(function(a, b){return a - b});
  document.write(points);
}
</script>

</body>
</html>

-------------------

Associative Array in JavaScript
In JavaScript, arrays with named indexes are not supported. Arrays are known to use numbered indexes however, objects in JavaScript use named indexes.
Let's understand it in simple words, when values are assigned to the keys in a variable of array, it transforms the array in to an object and loses the attributes and methods of an array.
These types of arrays are known as Associative Arrays in JavaScript.
Here is an Example to understand the Associative array:

<script>
var arr = new Object();
arr["one"] = 1;
arr["two"] = 2;
arr["three"] = 3;
for(var i in arr)
{
     document.write(i + "=" + arr[i] + '
');
}
</script>
Output :
one=1
two=2
three=3
Multi-Dimensional Array
In multi-Dimensional arrays, an array is used inside of an array.
Multidimensional arrays are known to have more than 2 dimensions.
In most cases, 2 dimensions are enough though, there are some places where 3 dimensions can be used like during 3D operations, physics calculations, etc.

Let's understand the multi-dimensional arrays with an example:

<script>
var array=Array(Array(10,11),Array(12,13))
for (var i = 0; i < array.length; i++)
{
for (var j = 0; j < array[i].length; j++)
{
document.write(array[i][j]+" ");
}  
document.write("<br>");
}
</script>
 
Ooutput:
10 11
12 13
Let's understand through 2nd example

 <script>
 // Create one dimensional array
  var arr = new Array(2);
document.write("Creating 2D array <br>");
// Loop to create 2D array using 1D array
for (var i = 0; i < arr.length; i++)
{
    arr[i] = new Array(2);
}
 
var h = 0;
 
// Loop to initilize 2D array elements.
for (var i = 0; i < 2; i++)
{
    for (var j = 0; j < 2; j++)
{
        arr[i][j] = h++;
    }
}
 
// Loop to display the elements of 2D array.  
for (var i = 0; i < 2; i++)
{
    for (var j = 0; j < 2; j++)  
{
        document.write(arr[i][j] + " ");
    }
    document.write("<br>");
}
</script>
 
Ooutput:
Creating 2D array
0 1
2 3






JavaScript Array Methods
1. map( )
This method creates a new array with the results of calling a provided function on every element in this array.

2. filter( )
This method creates a new array with only elements that passes the condition inside the provided function.

3. sort( )
This method is used to arrange/sort array’s elements either in ascending or descending order.

4. forEach( )
This method helps to loop over array by executing a provided callback function for each element in an array.

5. concat( )
This method is used to merge two or more arrays and returns a new array, without changing the existing arrays.

6. every( )
This method checks every element in the array that passes the condition, returning true or false as appropriate.

7. some( )
This method checks if at least one element in the array that passes the condition, returning true or false as appropriate.

8. includes( )
This method checks if an array includes the element that passes the condition, returning true or false as appropriate.

9. join( )
This method returns a new string by concatenating all of the array’s elements separated by the specified separator.

10. reduce( )
This method applies a function against an accumulator and each element in the array to reduce it to a single value.

11. find( )
This method returns the value of the first element in an array that pass the test in a testing function.

12. findIndex( )
This method returns the index of the first element in an array that pass the test in a testing function.

13. indexOf( )
This method returns the index of the first occurrence of the specified element in the array, or -1 if it is not found.

14. fill( )
This method fills the elements in an array with a static value and returns the modified array.

15. slice( )
This method returns a new array with specified start to end elements.

16. reverse( )
This method reverses an array in place. Element at last index will be first and element at 0 index will be last.

17. push( )
This method adds one or more elements to the end of array and returns the new length of the array.

18. pop( )
This method removes the last element from the end of array and returns that element.

19. shift( )
This method removes the first element from an array and returns that element.

20. unshift( )
This method adds one or more elements to the beginning of an array and returns the new length of the array.

Javascript Array Methods
The JavaScript array methods and various properties that help the developers to handle arrays with efficiency and easiness. One can get the value of a property and methods by specifying arrayname.property and the output of a method by specifying arrayname.method().
There are various uses of the array methods from joining two arrays to creating an array from the object. They are basically used to store multiple values in a single variable.
There are various methods of arrays in JavaScript and they are known to perform various operations in the JavaScript language.
Array Methods in JavaScript
Here is the list of Array methods in JavaScript along with their description and Examples
Methods Description
concat() This method returns a new array object that contains two or more merged arrays.
copywithin() This method copies the part of the provided array with its own elements and returns the modified array.
every() This method determines whether all the elements of an array are satisfying the given function conditions.
fill() This method fills elements into an array with static values.
filter() This method returns the new array containing the elements that pass the given function conditions.
find() This method returns the value of the first element in the provided array that satisfies the specified condition.
findIndex() This method returns the index value of the first element in the provided array that satisfies the specified condition.
forEach() This method invokes the provided function once for each element of an array.
includes() This method checks whether the given array contains the specified element.
indexOf() This method searches the specified element in the provided array and returns the index of the first match.
join() This method joins the elements of an array as a string.
lastIndexOf() This method searches the specified element in the provided array and returns the index of the last match.
map() This method calls the specified function for every array element and returns the new array
pop() This method removes and returns the last element of an array.
push() This method adds one or more elements to the end of an array.
reverse() This method reverses the elements of provided array.
shift() This method removes and returns the first element of an array.
slice() This method returns a new array containing the copy of the part of the provided array.
sort() This method returns the element of the provided array in a sorted order.
splice() This method add/remove elements to/from the provided array.
unshift() This method adds one or more elements in the beginning of the provided array.
Here are the syntax and examples of the methods mentioned in the above table:
1. Array Concat() method in JavaScript
Syntax:
array.concat(arr1,arr2,....,arrn)  
Here is an example to easily understand the Concat() method:

<script>
var arr1=["hey","How","are"];
var arr2=["You","1","2"];
var result=arr1.concat(arr2);
document.writeln(result);
</script>
Output :
hey,How,are,You,1,2
2. Array CopyWithin() method in JavaScript
Syntax :
 array.copyWithin(target, start, end)
Here is an example to easily understand the CopyWithin() method:

<script>
var arr=["PHPTPOINT","BEST","PHP TRAINING","INSTITUTE"]
// place from 0th position, the elements between 1st and 3rd position.
var result=arr.copyWithin(0,1,3);
document.writeln(result);
</script>
Output :
BEST,PHP TRAINING,PHP TRAINING,INSTITUTE
3. Array Every() method in JavaScript
Syntax :

array.every(callback(currentvalue,index,arr),thisArg)
Here is an example to easily understand the Every() method:
<script>
var marks=[10,50,25,97,60];
function check(value)
{
  return value>50;  //return false, as marks[4]=20
}
document.writeln(marks.every(check));
</script>
Output :
false
4. Array fill() method in JavaScript
Syntax :

arr.fill(value[, start[, end]])  
Here is an example to understand the fill() method:

<script>
var arr=["Java","PHP","Python"];
var result=arr.fill("PHPTPOINT");
document.writeln(arr);
</script>
Output :
PHPTPOINT,PHPTPOINT,PHPTPOINT
5. Array Filter() method in JavaScript
Syntax :

array.filter(callback(currentvalue,index,arr),thisArg
Here is an example to easily understand the filter() method:

<script>
var marks=[56,58,95,17,30];
function check(value)
{
  return value>50;  
}
document.writeln(marks.filter(check));
</script>
Output :
56,58,95
6. Array Find() method in JavaScript
Syntax :
 array.find(callback(value,index,arr),thisArg)
Here is an example to easily understand the find() method:

<script>
var arr=[7,20,15,30,95];
var result=arr.find(x=>x>50);
document.writeln(result)
</script>
Output :
95
7. Array Find Index() Method in JavaScript
Syntax :
 array.findIndex(callback(value,index,arr),thisArg)
Here is an example of find index() method:

<script>
var arr=[50,62,99,18,13];
var result=arr.findIndex(x=>x>50);
document.writeln(result)
</script>
Output :
1
8. Array forEach() method in JavaScript
Syntax :

array.forEach(callback(currentvalue,index,arr),thisArg)  
Here is an example for understanding the forEach() method:

<script>
var arr = ['PHPTPOINT', 'is', 'the best'];
arr.forEach(function(fetch) {
  document.writeln(fetch);
});
</script>
Output :
PHPTPOINT is the best
9. Array includes() method in JavaScript
Syntax :
array.includes(element,start)  
Here is an example for understanding the includes() method:

<script>
var arr=["20","90","100"]
var result=arr.includes("10");
document.writeln(result);
</script>
Output :
false
10. Array indexOf() method in JavaScript
Syntax :

array.indexOf(element,index)  
Here is an example to understand the indexOf() method:
<script>
var arr=["20","21","23","95","68"];
var result= arr.indexOf("21");
document.writeln(result);
</script>
Output :
1
11. Array join() method in JavaScript
Syntax :

 array.join(separator)
Here is an example to understand the join() method:
<script>
var arr=["Ferrari","possess","6000CC"]
var result=arr.join()
document.write(result);
</script>
Output :
Ferrari,possess,6000CC
12. Array lastIndexOf() method in JavaScript
Syntax :

array.lastIndexOf(element,index)  
Here is an example to understand the lastIndexOf() method:

<script>
var arr=["20","25","25","95","80"];
var result= arr.lastIndexOf("25");
document.writeln(result);
</script>
Output :
2
13. Array map() method in JavaScript
Syntax :

array.map(callback(currentvalue,index,arr),thisArg)
Here is an example to understand the map() method:

<script>
var arr=[5.1,9.9,7.7];
var result=arr.map(Math.round);
document.writeln(result);
</script>
Output :
5,10,8
14. Array pop() method in JavaScript
Syntax :

 array.pop()  
Here is an example to understand the pop() method:

<script>
var arr=["BEST","IS THE","PHPTPOINT"];
var len=arr.length;
for(var x=1;x<=len;x++)
  {
document.writeln("Extracted element: "+arr.pop()+"<br>");
  }
</script>
Output :
Extracted element: PHPTPOINT
Extracted element: IS THE
Extracted element: BEST
15. Array push() method in JavaScript
Syntax :

 array.push(element1,element2....elementn)  
Here is an example to understand the push() method:

<script>
var arr=["Hey","There"];
arr.push("How's you?");
document.writeln(arr);
</script>
Output :
Hey,There,How's you?
16. Array reverse() method in JavaScript
Syntax :

 array.reverse()
Here is an example to understand the reverse() method:

<script>
var arr=["This","is","in reverse"];
var rev=arr.reverse();
document.writeln(rev);
</script>
Output :
in reverse,is,This
17. Array shift() method in JavaScript
Syntax :

 array. shift()  
Here is an example to understand the shift() method:

<script>
var arr=["Hello","THIS IS","SHIFT"];
var result=arr.shift();
document.writeln(result);
</script>
Output :
Hello
18. Array Slice() method in JavaScript
Syntax :

 array.slice(start,end)  
Here is an example to understand the slice() method:

<script>
var arr=["Hello","This","Is","Slice"]
var result=arr.slice(2,3);
document.writeln(result);
</script>
Output :
Is
19. Array sort() method in JavaScript
Syntax :

array.sort(compareFunction)
Here is an example to understand the sort() method:

<script>
var arr=["Apple","Nokia","Boolean","Lava"]
var result=arr.sort();
document.writeln(result);
</script>
Output :
Apple,Boolean,Lava,Nokia
20. Array splice() method in JavaScript
Syntax :

array.splice(start,delete,element1,element2,?,elementn)
Here is an example to understand the splice() method:

<script>
var arr=["Here","is","the"];
var result=arr.splice(3,1,"placement")
document.writeln(arr);
</script>
Output :
Here,is,the,placement
21. Array Unshift() method in JavaScript
Syntax :

array. unshift(element1,element2,....,elementn)  
Here is an example to understand the unshift() method:

<script>
var arr=["Is","Here"];
var result=arr.unshift("Shift");
document.writeln(arr);
</script>
Output :
Shift,Is,Here





<html>
<body>
<script>  
var a,n,i;  
a=1
n=parseInt(prompt(“Enter any no”))

do{
     a=a*i;
     i++;
}while (i<=n);  

document.write(a + "<br/>");  
</script>  
I=i+1    i++  i+=1  ++i

4) JavaScript for in loop

The JavaScript for in loop is used to iterate the properties of an object. We will discuss about it later.

JavaScript Functions
JavaScript functions are used to perform operations.

We can call JavaScript function many times to reuse the code.



Advantage of JavaScript function
There are mainly two advantages of JavaScript functions.
1. Code reusability: We can call a function several times so it save coding.
2. Less coding: It makes our program compact. We don’t need to write many lines of code each time to perform a common task.
________________________________________
Function Invocation
The code inside the function will execute when "something" invokes (calls) the function:

1)When an event occurs (when a user clicks a button)
2)When it is invoked (called) from JavaScript code
3)Automatically (self invoked)
 

JavaScript Function Syntax
The syntax of declaring function is given below.




  function functionName([arg1, arg2, ...argN]){  
  //code to be executed  
  }  
JavaScript Functions can have 0 or more arguments.
 
A)default or no argument function

JavaScript Function Example
function in JavaScript that does not has arguments.
<html>
<body>
              <script>  
function test()
               {  
alert("hello! this is default function");  
}  
</script>  

<input type="button" onclick="test()" value="call function"/>  

</body>
</html>

<html>
<body>
              <script>  
function add(){  
var a,b,c;
                   a=parseInt(prompt("Enter 1st no");
                   b=parseInt(prompt("Enter 2nd no");
c=a+b;
                   alert("Add"+c);
}  
</script>  

<input type="button" onclick="add()" value="call function"/>  

</body>
</html>
==================
<html>
<body>
              <script>  
function table(){  
var n,i;
                   n=parseInt(prompt("Enter  no");
for (i=1;i<=10;i++)
                         document.write(n*i);
}  
</script>  

<input type="button" onclick="table()" value="table function"/>  

</body>
</html>









types
1)default

<html>
<head>
</head>
<body>
<script>  
function  test()
{  
alert("welcome");  
}  
function  india()
{  
alert("i m in india");  
}  
function  usa()
{  
alert("i m in usa");  
}  
function add()
{
       var a ,b ,c;
       a=parseInt(prompt("Enter a"));
       b=parseInt(prompt("Enter b"));      
       c=a+b;
       alert(c);

}
test();
usa() ;
india();
add();
</script>
 
 

</body>
</html>




CALL BY VALUE


I)FUNCTION WHICH TAKE THE ARGUMENT BUT NOT RETURN THE VALUE

<html>
<body>
<script>  
function  cube(a)
{  
alert(a*a*a);  
}  
</script>  
<form>  

<input type="button" value="click" onclick="cube(4)"/>  
</form>  
</body>
</html>
---------------------------------
<html>
<body>
<script>  
function  cube(number)
{  
alert(number*number*number);  
}  
var n;
n=parseInt(prompt("Enter no"));
cube(n)//call
</script>
</body>
</html>

-----------------------------------------------
CALL BY VALUE
(II) function which take the argument  and also return the value

<html>
<body>
<script>  
function  cube(number)5
{  
return(number*number*number);  
}  
var n;
n=parseInt(prompt("Enter no")); 5
x=cube(n);
document.write("ans"+x);
OR
document.write(cube(n));

</script>
</body>
</html>

(ii)DEFAULT WITH RETURN VALUE
<script>  
function Info(){  
return "hello shivaconceptsoulation! How r u?";  
}  
</script>  
<script>  
document.write(Info());  
</script>  

Output of the above example
hello shivaconceptsoulation! How r u?



<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Functions</h2>
<p>This example calls a function which performs a calculation and returns the result:</p>

<p id="testid"> </p>
<script>
var x = test(2, 3);
document.getElementById("testid").innerHTML = x;

function test(a, b)
{
  return a * b;
}
</script>
</body>
</html>

<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Functions</h2>
<p>This example calls a function which performs a calculation and returns the result:</p>

<p>swapnil<span id="testid"> </span></p >
<script>
var x = test(2, 3);
document.getElementById("testid").innerHTML = x;

function test(a, b)
{
  return a * b;
}
</script>
</body>
</html>

========================
wap to sort an array using funcion
function which take arguments as array and also return an sorted array
<!DOCTYPE html>
<html>
<head>
</head>
<body>
<script type="text/javascript">  
  function sort(arr)
  {
     
    var t;
    for (i=0;i<arr.length;i++)
    {  for (j=i+1;j<arr.length;j++)
       {  if ( arr[i]>arr[j] )
          {  
              t=arr[i];
              arr[i]=arr[j];
              arr[j]=t;

           }
    }
  }
    return arr;
  }
    var   arr=[12,54,23,78,144],y;
    y=sort(arr);
  document.write(y);
</script>
</body>
</html>

====================================




The () Operator Invokes the Function
Using the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.

Accessing a function without () will return the function object instead of
 the function result.


Functions Used as Variable Values
Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.


<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Functions</h2>
<p id="test"></p>
<script>
document.getElementById("test").innerHTML =
"The temperature is " + toCelsius(77) + " Celsius";

function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}
</script>

</body>
</html>


=================================================================================================================================================================================================================================================================================================


vandana malviya <vandana2022malviya@gmail.com>
Thu, Oct 27, 2022, 1:56 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

What is Event?

If we perform any action on the HTML element then the event will be raised.

for example, if we click on Button then click is the event for Button.
.......................................................................................................................................

Javascript provides multiple sets of events according to HTML elements:-

EVENT LIST OF JAVASCRIPT:-

1 onload :-  when the page will start to load then onload event method will be called.

Example of Onload:-

Create Script to change page background when the page will be loaded?

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script>
     function fun()
     {
        document.getElementById("b").style.backgroundColor='cyan';
     }
     function fun1()
     {
      alert("GET huge discount in DEVOPS");

     }

 </script>
</head>
<body id="b" onload="fun();fun1()">


</body>
</html>

2 onclick:-


It is the most important command because it is used to click a button, reset, submit, image, div, hyperlink element and perform an action.

<script>
function display()
{
 alert (“Welcome”);
}
</script>

<input type="button" onclick= "display()"    />




 

Create JAVASCRIPT to change page background according to Button Click, if We click on Red button then Red Color, Green Button then Green Color, Blue button then Blue Color.


<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script>
  function fun()
  {
   document.getElementById("b").style.backgroundColor='orange';

  } 
     function fun1()
     {
       document.getElementById("b").style.backgroundColor="red";
     }
     function fun2()
     {
      document.getElementById("b").style.backgroundColor="green";
     }
     function fun3()
     {
      document.getElementById("b").style.backgroundColor="blue";
     }
</script>
</head>
<body id="b" onload="fun()">
<input type="button" value="Red" onclick="fun1()" />
<br>
<br>
<input type="button" value="Green" onclick="fun2()" />
<br>
<br>
<input type="button" value="Blue" onclick="fun3()" />

</body>
</html>



Create Event For Addition Program?





3 mouseover:-

When we mouse over the button, image or hyperlink then this event will be called.





4 onmouseout:-

when we remove mouse position from a button, image or hyperlink then this will be called.

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
 function fun1()
 {
           document.getElementById("img").style.width="300px";
           document.getElementById("img").style.height="300px";
 }
 function fun2()
 {
          document.getElementById("img").style.width="100px";
          document.getElementById("img").style.height="100px";
 }
 

 </script>
</head>
<body>

<img src="logo.png" id="img" onmouseover="fun1()" onmouseout="fun2()"   width="100" height="100" />
</body>
</html>

Example 2:-

<!DOCTYPE html>
<html>
<head>
    <title></title>
    <script>
     function fun1()
     {
            //alert("fun1");
           document.getElementById("im").src ="img2.png";
     }
     function fun2()
     {
            //alert("fun2");
           document.getElementById("im").src ="img3.jpg";
     }
    
     function fun4()
     {
         document.getElementById("im").src ="logo.png";
     }
    </script>
</head>
<body>
<img src="img1.jpg"  width="200px" height="250px" onmouseover="fun1()" onmouseout="fun2()" onmousemove="fun3()" onmouseenter="fun4()" id="im" />
<br>
<br>
</body>
</html>


5 onkeyup:- when we presss and hold any key then onkeyup event  will work
ssssssssssssssssssssssssssssssssssssssssssss
6 onkeydown:-

when we relase key button then it will work.


<!DOCTYPE html>
<html>
<head>
    <title></title>
    <script>
     function showdata(a)
     {
         document.getElementById("board").innerHTML=a;
     }
     function changecolor(a)
     {
         document.getElementById("board").style.backgroundColor=a;
     }
    </script>
</head>
<body>

<div id="board" style="background-color: black;color:white;width:300px;height: 200px;border:2px solid red;float:left;" >

</div>
<select onchange="changecolor(this.value)" >
<option value="Red">Red</option>
<option value="Green">Green</option>
<option value="Blue">Blue</option>
</select>
<br>
<br>
<div style="clear: left"></div>
Type here
<br>
<textarea id="txt" onkeyup="showdata(this.value)" rows="5" cols="20">

</textarea>
</body>
</html>

==============================
OnFocus is when you give an item focus, by clicking on it, tabbing into it, using the tab key, or doing anything that makes it the active element.

OnBlur is when something loses focus, by clicking on something else, tabbing out of it, using the tab key, or doing something that makes another element the active element

7 onblur:-

It will be called when the cursor will be removed from textfield.

8 onfocus:-

It will be called when cursor will be assigned into textfield

Example of ONBLUR and ONFOCUS

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script>
       function fun1()
       {
           document.getElementById("txt1").style.backgroundColor='red';
       }
        function fun2()
       {
           document.getElementById("txt2").style.backgroundColor='green';
       }
       function fun3()
       {
        document.getElementById("txt1").style.backgroundColor='cyan';
        document.getElementById("txt2").style.backgroundColor='';

       }
 </script>
</head>
<body>
 <input type="text" id="txt1" onblur="fun1()" onfocus="fun3()" />
 <br>
 <br>
    <input type="text" id="txt2" onfocus="fun2()" />

</body>
</html>

9 onchange:-


RadioButton CheckBox:-

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
 
  function fun(a)
  {

   //alert(a);
   document.getElementById("res").innerHTML= "Selected Course is "+a;
  }
 </script>
</head>
<body>
 <h1>Select Course</h1>
 <input type="radio" name="r1" id="r1" value="C" onchange="fun(this.value)">C
 <br>
 <input type="radio" name="r1" id="r1" value="CPP" onchange="fun(this.value)">CPP
 <br>
 <input type="radio" name="r1" id="r1" value="DS" onchange="fun(this.value)">DS
 <br>
  <span id="res"></span>

</body>
</html>
..................................................................................................................

It is used to manage event operation in ListBox,SelectBox,RadioButton and CheckBox  .

CheckBox Complete Code:-

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  function fun()
  {
        var s=document.frm.chk;
        s1="";
          for(i=0;i<s.length;i++)
          {
           if(s[i].checked)
           {
            s1=s1+s[i].value;
           }
          }
         document.getElementById("res").innerHTML=s1;


  }


 </script>
</head>
<body>
<form name="frm">
<input type="checkbox" id="chk[]" name="chk" value="C" onchange="fun()" />C
<br>
<br>
<input type="checkbox" id="chk[]" name="chk" value="CPP" onchange="fun()"  />CPP
<br>
<br>
<input type="checkbox" id="chk[]" name="chk" value="DS" onchange="fun()"  />DS
<br>
<br>
<span id="res"></span>
</form>
</body>
</html>

....................................................................................................

JavaScript Example for DropDownList and ListBox:-

We can select only single item

<select id="xyz">
<option value="Value Field ">Display Item</option>

</select>

ListBox:-
We can select multiple item's.

<select id="xyz" multiple="true">
<option value="Value Field ">Display Item</option>

</select>

Complete Explanation of DropDownlist,ListBox ,CheckedLIST using JS?

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <style type="text/css">
  li
  {
   list-style-type: none;

  }
  li:hover
  {

   background-color: gray;
  }

 </style>
 <script>
      function fun(a)
      {
           document.getElementById("res").innerHTML=a;

      }
      function fun1()
      {
        course="";
        for(i=0;i<document.getElementById("lst[]").length;i++)
        {

            if(document.getElementById("lst[]")[i].selected)
            {

             course = course+document.getElementById("lst[]")[i].value+" ";
            }

        }
        document.getElementById("res").innerHTML=course;
      }
        function fun2()
      {
        course="";
        //console.log(document.frm.chk.length);
        for(i=0;i<document.frm.chk.length;i++)
        {

            if(document.frm.chk[i].checked)
            {

             course = course+document.frm.chk[i].value+" ";
            }

        }
        document.getElementById("res").innerHTML=course;
      }

 </script>
</head>
<body>
<select onchange="fun(this.value)">
 
 <option value="C">C</option>
 <option value="CPP">CPP</option>
 <option value="DS">DS</option>
    <option value="JAVA">JAVA</option>
    <option value=".NET">.NET</option>

</select>
<br>
<br>
<br>
<select id="lst[]"   onchange="fun1()" multiple="true">

 <option value="C">C</option>
 <option value="CPP">CPP</option>
 <option value="DS">DS</option>
    <option value="JAVA">JAVA</option>
    <option value=".NET">.NET</option>

</select>

<div id="res">
 
</div>
<form name="frm">
<ul>
<li> <input type="checkbox" name="chk" id="chk[]" value="C" onchange="fun2()">C</li>
<li> <input type="checkbox" name="chk" id="chk[]" value="CPP" onchange="fun2()">CPP</li>
<li> <input type="checkbox" name="chk" id="chk[]" value="DS" onchange="fun2()">DS</li>
<li> <input type="checkbox" name="chk"id="chk[]" value="JAVA" onchange="fun2()">JAVA</li>
<li> <input type="checkbox" name="chk" id="chk[]" value=".NET" onchange="fun2()">.NET</li>

</ul>
</form>
</body>
</html>

 



Example 3:-

 

Create a script to complete the addition of two numbers?

 

 

<!DOCTYPE html>

<html>

<head>

       <title></title>

       <script type="text/javascript">

             

              function fun()

              {

num1 = document.getElementById("txt1").value;

num2 = document.getElementById("txt2").value;

num3 = parseInt(num1)+parseInt(num2);<

...

[Message clipped]  View entire message
-=========================================================================================================================================================================================================================================================================


vandana malviya <vandana2022malviya@gmail.com>
Sat, Oct 29, 2022, 1:38 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

<html lang="en-us">

  <head>

    <meta charset="utf-8">

    <meta name="viewport" content="width=device-width">

    <title>Random color example — event handler attribute</title>

    <style>

      button {

        margin: 10px

      };

    </style>

  </head>

  <body>

    <button>Change color</button>

    <script>

      const btn = document.querySelector('button');

 

      function random(number) {

        return Math.floor(Math.random() * (number+1));

      }

 

      btn.addEventListener('click', () => {

        const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`;

        document.body.style.backgroundColor = rndCol;

      });

    </script>

  </body>

</html>

 

 

 

The event in JavaScript:- 

It is used to perform an action in HTML elements, event will be defined as a method and call under HTML elements using event action.


for example, onclick is the event that will be called when we click on the button.

 

Javascript is called an event-driven based language.





Javascript has multiple event methods


1) onkeypress  --->  when we press keyboard any button then it will be called

2) onkeyup  ------> when we press any key then the first onkeyup event will be called

3) onmouseover --->  when we over the mouse under the HTML element then this event will be called

4) onmouseout --->  when we remove mouse control from the HTML element then this event will be

 
5) onfocus ------>    When cursor will be assigned into a particular HTML element then this event will be called

6) onblur  ---->      When we remove the cursor from the HTML element then this event will be raised

7) onclick  ----->     When we click on Button then onclick event method will be called

8) onchange  ---->  when we select dropdown list or Listbox item then on-change will be called.



Example of onmouseover and onmouseout:-

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  function fun1()
  {
            document.getElementById("btn1").style.backgroundColor='red';
            document.getElementById("btn1").style.width='200px';
            document.getElementById("btn1").style.height='30px';
  }
  function fun2()
  {
          document.getElementById("btn1").style.backgroundColor='';
          document.getElementById("btn1").style.width='';
            document.getElementById("btn1").style.height='';
  }

 </script>
</head>
<body>
  <input type="button" id="btn1" value="Click" onmouseover="fun1()" onmouseout="fun2()" />
</body>
</html>


Example of OnFocus and Onblur:-

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  function fun1()
  {
   
            document.getElementById("txt1").style.backgroundColor='green';
            document.getElementById("txt2").style.backgroundColor='red';
       
  }
  function fun2()
  {

          document.getElementById("txt1").style.backgroundColor='red';
         document.getElementById("txt2").style.backgroundColor='green';
  }

 </script>
</head>
<body>
  <input type="text" id="txt1" onfocus="fun1()" onblur="fun2()"     />
   <input type="text"  id="txt2"   />
</body>
</html>

........................................................................................................................................................



Example of Keyboard based event:-


<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  function fun(data)
  {

   //alert(a);
   document.getElementById("res").innerHTML=data;
  }
 </script>
</head>
<body>
<input type="text" id="txt1" onkeyup="fun(this.value)" />
<div id="res"></div>
</body>
</html>



 
Example of onchange using dropdownlist:


<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  r1=" ";
  r2=" ";
  function fun(data)
  {
         r1=data;
         document.getElementById("res").innerHTML=r1+r2;
  }
        function fun1(data)
  {
         r2=data;
         document.getElementById("res").innerHTML=r1+r2;
  }
 </script>
</head>
<body>
<select id="country" onchange="fun(this.value)">
 <option value="">Select Country</option>
 <option value="INDIA">INDIA</option>
 <option value="USA">USA</option>
 <option value="CHINA">CHINA</option>
 <option value="JAPAN">JAPAN</option>
</select>
<br><br>
<select id="state" onchange="fun1(this.value)">
 <option value="">Select State</option>
 <option value="MP">MP</option>
 <option value="UP">UP</option>
 <option value="AP">AP</option>
 <option value="HP">HP</option>
</select>
<div id="res"></div>
</body>
</html>

onchange example using RadioButton:-

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  function fun(data)
  {
         document.getElementById("res").innerHTML=data;

  }
 </script>
</head>
<body>
<input type="radio" name="r1" id="r1" value="Male" onchange="fun(this.value)">Male
<br><br>
<input type="radio" name="r1" id="r1" value="Female" onchange="fun(this.value)">Female
<br><br>
<div id="res"></div>
</body>
</html>

Example of  CheckBox:-

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
  c1="";
  c2="";
  function fun1()
  {
   if(document.getElementById("c1").checked)
   {
          c1 =document.getElementById("c1").value;
   }
   else
   {
           c1="";
   }
         document.getElementById("res").innerHTML=c1+c2;

  }
  function fun2()
  {
  if(document.getElementById("c2").checked)
   {
          c2 =document.getElementById("c2").value;
   }
   else
   {
           c2="";
   }
         document.getElementById("res").innerHTML=c1+c2;

  }
 </script>
</head>
<body>
<input type="checkbox" name="c1" id="c1" value="C" onchange="fun1()">C
<br><br>
<input type="checkbox" name="c2" id="c2" value="CPP" onchange="fun2()">CPP
<br><br>
<div id="res"></div>
</body>
</html>

 

Example of Checkbox and Listbox:-

 

 

<!DOCTYPE html>

<html>

<head>

       <title></title>

       <script type="text/javascript">

              function fun()

              {

            s = "";

            console.log("click"+document.frm.chk.length);

            for(i=0;i<document.frm.chk.length;i++)

            {

             

                if(document.frm.chk[i].checked)

                  {

                     s = s+ document.frm.chk[i].value;

                  }

            }

 

           s1="";

           for(i=0;i<document.getElementById("lst[]").length;i++)

            {

             

                if(document.getElementById("lst[]")[i].selected)

                  {

                     s1 = s1+ document.getElementById("lst[]")[i].value;

                  }

            }

 

            document.getElementById("res").innerHTML = "name is " + document.frm.txtname.value+s + "Course is "+s1;

 

              }

 

       </script>

</head>

<body>

<form name="frm" action="">

<input type="text" name="txtname" /> <br>   

<input type="checkbox" name="chk" value="C" />C <br>

<input type="checkbox" name="chk" value="C++" />C++ <br>

<input type="checkbox" name="chk" value="DS" />DS <br>

 

<br><br>

<select id="lst[]" multiple="true" style="width:300px;">

       <option value="C">C</option>

    <option value="C++">C++</option>

    <option value="DS">DS</option>

    <option value="JAVA">Java</option>

    <option value=".NET">.NET</option>

</select>

<br><br>

<input type="button" id="btnclick" onclick="fun()" value="Click" />

<br>

<div id="res"></div>

</form>

</body>

</html>

 



Validation concept in Javascript:

It is used to check that the entered data is correct according to format, range, and requirement.

It is also used to validate different data format using a regular expression.

When we create Login Form, a registration form or any other form then we can implement Javascript validation code which can be executed in any web browser.


<!DOCTYPE html>
<html>
<head>
 <title></title>
 <script type="text/javascript">
 
  function validreg()
  {     bbb.aaa@gmail.com
           var email = document.getElementById("txtemail").value;
           atpos = email.indexOf("@");
           dotpos = email.lastIndexOf(".");
           if(atpos==-1 || dotpos==-1 || dotpos-atpos<3 || atpos<1 ||
dotpos+1==email.length)
           {
            document.getElementById("spemail").innerHTML= "Invalid emailid";
            return false;
           }
           if(document.getElementById("txtpass").value.length==0)
           {

            document.getElementById("sppass").innerHTML= "Enter password";
            return false;
           }
            if(document.getElementById("txtcpass").value.length==0)
           {

            document.getElementById("spcpass").innerHTML= "Re-Enter password";
            return false;
           }
          if(document.getElementById("txtpass").value!=document.getElementById("txtcpass").value)
           {

            document.getElementById("sppass").innerHTML= "password mismatch";
            return false;
           }
           if(document.getElementById("txtmobile").value.length==0)
           {
            document.getElementById("spmobile").innerHTML= "mobileno is required";
            return false;
           }
           if(isNaN(document.getElementById("txtmobile").value))
           {
            document.getElementById("spmobile").innerHTML= "mobileno should be numeric";
            return false;
           }
           if(document.getElementById("txtmobile").value.length!=10)
           {
            document.getElementById("spmobile").innerHTML= "mobileno should be 10 digit";
            return false;
           }
  }
 </script>
</head>
<body>
<form action="Demo5.html" method="post">
<input type="text" id="txtemail" placeholder="Enter email" />
<span id="spemail"></span>
<br>
<br>
<input type="password" id="txtpass" placeholder="Enter password" />
<span id="sppass"></span>
<br>
<br>
<input type="password" id="txtcpass" placeholder="Re-Enter password" />
<span id="spcpass"></span>

<br>
<br>
<input type="text" id="txtmobile" placeholder="Enter mobileno" />
<span id="spmobile"></span>
<br>
<br>
<input type="submit" value="Register" id="btnreg" value="Register" onclick="return validreg()" />
<br>
<br>
</form>
</body>
</html>

Validation using JAVASCRIPT:-



It is used to check that entered data of an application form is valid or not, for example, if we enter mobileno and emailid then format of email id and mobile no is correct or not it will be managed by Validation.

Now HTML5 Validation is working in form but it is not applied for all conditions,if we want to create custom validation logic then we will use Javascript or Jquery.


Now we are creating a registration form with all possible validation process

<!DOCTYPE html>
<html>
<head>
 <title></title>
 <style type="text/css">
  span
  {
   color:red;
  }

 </style>
 <script type="text/javascript">
  function validate()
  {
   name = document.getElementById("txtname").value;
   pass = document.getElementById("txtpass").value;
   cpass = document.getElementById("txtcpass").value;
   email = document.getElementById("txtemail").value;
   mobile = document.getElementById("txtmobile").value;
   atpos = email.indexOf("@");
   dotpos = email.lastIndexOf(".");
   if(name.length==0)
   {
    document.getElementById("spname").innerHTML="Enter name first";
    return false;
   }
   if(pass.length<5)
   {
    document.getElementById("sppass").innerHTML="Password length should be above five";
    return false;
   }
   if(pass!=cpass)
   {
    document.getElementById("sppass").innerHTML="Password Mismatch from confirm password";
    return false;
   }
   if(isNaN(mobile))
   {
    document.getElementById("spmobile").innerHTML="Mobile number should be numeric";
    return false;
   }
   if(mobile.length!=10)
   {
    document.getElementById("spmobile").innerHTML="Mobile number should be 10 digit";
    return false;
   }
   if(atpos==-1 || dotpos == -1 || dotpos<atpos || (dotpos-atpos)<2)
   {
    document.getElementById("spemail").innerHTML="Invalid emailid";
    return false;
   }

  }

 </script>
</head>
<body>
<form action="addition.html">
 <input type="text" id="txtname" placeholder="Enter name" /><span id="spname"></span>
 <br>
 <br>
 <input type="password" id="txtpass" placeholder="Enter password" /><span id="sppass"></span>
 <br>
 <br>
 <input type="password" id="txtcpass" placeholder="Enter confirm password" />
 <br>
 <br>
 <input type="text" id="txtmobile" placeholder="Enter mobileno" /><span id="spmobile"></span>
 <br>
 <br>
 <input type="text" id="txtemail" placeholder="Enter emailid" /><span id="spemail"></span>
 <br>
 <br>
 <input type="submit" id="btnsubmit" value="Click" onclick="return validate()" >
</body>
</html>




============================================================================================================================================================================================================================================================================================================================
vandana malviya <vandana2022malviya@gmail.com>
Wed, Nov 2, 2022, 1:58 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

JavaScript Constructor Method

A JavaScript constructor method is a special type of method which is used to initialize and create an object. It is called when memory is allocated for an object.

1)The constructor keyword is used to declare a constructor method.
2)The class can contain only one constructor method.
3)JavaScript allows us to use parent class constructor through super keyword.

Types of Java constructors
There are two types of constructors in JavaSCRIPT:
1. Default constructor (no-arg constructor)
2. Parameterized constructor

________________________________________
Java Default Constructor
A constructor is called "Default Constructor" when it doesn't have any parameter.

class Employee {  
  constructor() {  
  document.write("default constructor invoke");  
  }  
}  
var emp = new Employee();  
var emp1 = new Employee();  

<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript">
    class Fact
        {  
  constructor()
   {  
  var n=+(prompt("Enter any no"));
  var i=1;
  for(i=1;i<=10;i++)
  {
     document.write(n*i+"<br>");
  }
  }  
}  
var f = new Fact();  
    </script>
</head>
<body>

</body>
</html>




Constructor Method Example
Let's see a simple example of a constructor method.

<script>  
class Employee {  
  constructor() {  
    this.id=101;  
    this.name = "ram";  
  }  
}  
var emp = new Employee();  
document.writeln(emp.id+" "+emp.name);
var emp1 = new Employee();  
document.writeln(emp1.id+" "+emp1.name);  
</script>  
 
**********************************

<html>
<body>
<script>
class Student
  {
    constructor()
    {
       var name,per,p,c,m,t;
    }
        getData()
        {  this.name= prompt("Enter name");        
           this.p=parseInt(prompt("Enter phy marks"));
           this.c=parseInt(prompt("Enter che marks"));
           this.m=parseInt(prompt("Enter mat marks"));
        }
        calci()
     {   this.t=this.p+this.c+this.m;
         this.per=this.t/3;
   
     }
      showData()
      {
        document.write("name="+this.name+"<br>");
        document.write("total="+this.t+"<br>");
        document.write("per="+this.per+"<br>");
      }      
     

    }
   
    var stud=new Student();
     stud.getData();// initlise
     stud.calci();
     stud.showData();//alert() invokes
</script>

</body>
</html>


----------------------------------------------------
CONSTRUCTOR
1) DEFAULT =

<html>
<script>
class student {

constructor()
 {
   document.write("<br>"+"DEFAULT CONSTRUCTOR CALL");
 }

}
let a=new student();
let b=new student();

</script>
</html>

A constructor is a special function that creates and initializes an object instance of a class. In JavaScript, a constructor gets called when an object is created using the new keyword.

 The purpose of a constructor is to create a new object and set values for any existing object properties.

A new empty object gets created.

The this keyword begins to refer to the new object and it becomes the current instance object.

The new object is then returned as the return value of the constructor.
 

====================
PARAMETRIZED CONSTRUCTOR AND FUNCTION
when we pass argument in constructor known as parametrized
constructor
===========================
emp         id name salary    da =bs*20%   hra=bs *40% gs=bs+da+hra
<html>
<head>
<script>
class student {
constructor(a,b)
 {
this.first=a;
this.second=b;
}
    sum()
   {
  document.write(this.first+this.second);
  }
     sub ()
  {  
  return (this.first-this.second);
        }
 display  () {
  document.write("<br>"+"hello");  
}
}
 let obj=new student(100,80);
  obj.sum();
 document.write("sub="+obj.sub());
or
/* var x=obj.sub()
document.write("Sub="+x);*/

 obj.display();
</script>
</head>
<body>


  </body>
</html>






 <html>
<head>
<script>
class student {

constructor(a,b)
 {
this.first=a;
this.second=b;
this.sum = function ()
   {
  return (this.first+this.second);
  }
this.sub = function ()
  {    
  return (this.first-this.second);
    }
this.display = function () {
    document.write("<br>"+"hello");
  }
}}
 let obj=new student(100,80);
 document.write("sum"+obj.sum()+"<br>");
 document.write("sub="+obj.sub());
 obj.display();

</script>
</head>
<body>
  </body>
</html>
===========================
 <html>
<head>
<script>
class Calculator {
constructor(x,y)
 {
this.first=x;
this.second=y;
this.sum = function ()
   {
  return (this.first+this.second);
  }
this.sub = function ()
  {    
  return (this.first-this.second);
                 }
this.mult = function ()
  {    
  return (this.first*this.second);
                 }
   
this.div = function ()
  {    
  return (this.first/this.second);
                 }

}


}
 var x=parseInt(prompt("Enter 1st no"))
var y=parseInt(prompt("Enter 2nd no"))
 let obj=new Calculator(x,y);

 document.write("sum"+obj.sum()+"<br>");
 document.write("sub="+obj.sub()+"<br>");
 document.write("mult"+obj.mult()+"<br>");
 document.write("div="+obj.div()+"<br>");
 
 obj.display();

</script>
</head>
<body>
  </body>
</html>

-------------------------------------------------
<html>
<script>
class student {
constructor(a,b,c)  
{
this.tot=a+b+c;
this.p=this.tot/3;

this.per=function()
{ document.write("per="+this.p);
}
this.div=function()
{
if(p>=60)
document.write("1st div");
else
if(p>=50)
document.write("2nd div");
    else
    if(p>=40)
     document.write("3rd div");
}
}
}
var p,c,m;
p=parseInt(prompt("Enter p"));
c=parseInt(prompt("Enter c"));
m=parseInt(prompt("Enter m"));
let a=new student(p,c,m);
a.per();
a.div();
</script>
</html>

=================================================================================================================================================================================================

JavaScript static Method
The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance(object) is not required to call the static method. These methods are called directly on the class itself.

Points to remember
1)The static keyword is used to declare a static method.
2)The static method can be of any name.
3)A class can contain more than one static method.
4)If we declare more than one static method with a similar name, the JavaScript always invokes the last one.
5)The static method can be used to create utility functions.
6)We can use this keyword to call a static method within another static method.
7)We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.

JavaScript static Method Example 1


<!DOCTYPE html>
<html>
<body>

<script>
class Test
{
  static display()
  {
    return "static method is invoked"
  }
}
document.write(Test.display());
</script>

</body>
</html>
-------------------------------------
Example 2
Le's see an example to invoke more than one static method.
<!DOCTYPE html>
<html>
<body>
<script>
class Test
{
  static display1()
  {
    return "static method is invoked"
  }
  static display2()
  {
    return "static method is invoked again"
  }
}

document.writeln(Test.display1()+"<br>");
document.writeln(Test.display2());
</script>

</body>
</html>

Example 3
Let's see an example to invoke more than one static method with similar names.

<!DOCTYPE html>
<html>
<body>

<script>
class Test
{
  static display()
  {
    return "static method is invoked"
  }
  static display()
  {
    return "static method is invoked again"
  }
}
document.write(Test.display());
</script>

</body>
</html>

 --------------------------
Example 4
Let's see an example to invoke a static method within the constructor.

<!DOCTYPE html>
<html>
<body>

<script>
class Test {
  constructor() {
  document.writeln(Test.display()+"<br>");
  document.writeln(this.constructor.display());
  }
  static display() {
      return "static method is invoked"
  }
}
var t=new Test();
</script>
</body>
</html>
------------------------------
Example 5
Let's see an example to invoke a static method within the non-static method.
 
<!DOCTYPE html>
<html>
<body>
<script>
class Test {
  static display() {
      return "static method is invoked"
  }  
 show() {
  document.writeln(Test.display()+"<br>");
  }  
}
var t=new Test();
t.show();
</script>
</body>
</html>
--------------------------------------------------
<html>
<body>
<script>
class Student
  {
    constructor()
    {
       var name,per,p,c,m,t;
    }
        getData()
        {  this.name= prompt("Enter name");        
           this.p=parseInt(prompt("Enter phy marks"));
           this.c=parseInt(prompt("Enter che marks"));
           this.m=parseInt(prompt("Enter mat marks"));
        }
        calci()
     {   this.t=this.p+this.c+this.m;
         this.per=this.t/3;
     }
      showData()
      {
        document.write("name="+this.name+"<br>");
        document.write("total="+this.t+"<br>");
        document.write("per="+this.per+"<br>");
      }      
     

    }
   
    var stud=new Student();
     stud.getData();
     stud.calci();
     stud.showData();//alert() invokes
</script>

</body>
</html>


JavaScript Encapsulation
The JavaScript Encapsulation is a process of binding the data (i.e. variables) with the functions acting on that data. It allows us to control the data and validate it. To achieve an encapsulation in JavaScript: -

Use var keyword to make data members private.

Use setter methods to set the data and getter methods to get that data.
The encapsulation allows us to handle an object using the following properties:

Read/Write - Here, we use setter methods to write the data and getter methods read that data.

Read Only - In this case, we use getter methods only.

Write Only - In this case, we use setter methods only.

JavaScript Encapsulation Example
Let's see a simple example of encapsulation that contains two data members with its setter and getter methods.


<script>  
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
      this.marks=marks;  
    }    
    }  
    var stud=new Student();
    var a=prompt("Enter name");
     stud.setName(a);  
     stud.setMarks(80);  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>  


------------

JavaScript Encapsulation Example: Validate
In this example, we validate the marks of the student.

<!DOCTYPE html>
<html>
<body>

<script>
class Student
  {
    constructor()
    {
       var name;
       var marks;
    }
        getName()
        {
          return this.name;
        }
      setName(name)
      {
        this.name=name;
      }
     
      getMarks()
      {
        return this.marks;
      }
    setMarks(marks)
    {
        if(marks<0||marks>100)
        {
          alert("Invalid Marks");
        }
      else
        {
          this.marks=marks;
        }
    }
    }
    var stud=new Student();
     stud.setName("John");
     stud.setMarks(110);//alert() invokes
     document.writeln(stud.getName()+" "+stud.getMarks());
</script>

</body>
</html>

 
--------------------------
JavaScript Encapsulation Example: Prototype-based approach
Here, we perform prototype-based encapsulation.

<!DOCTYPE html>
<html>
<body>

<script>
function Student(name,marks)
{
  var s_name=name;
  var s_marks=marks;
  Object.defineProperty(this,"name",{
    get:function()
    {
      return s_name;
    },
  set:function(s_name)
  {
    this.s_name=s_name;
  }
 
});
 
    Object.defineProperty(this,"marks",{
    get:function()
    {
      return s_marks;
    },
  set:function(s_marks)
  {
    this.s_marks=s_marks;
  }
 
});
 
}
  var stud=new Student("John",80);
  document.writeln(stud.name+" "+stud.marks);
</script>

</body>
</html>

 ------------------------------------------
JavaScript Inheritance
The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.

The JavaScript extends keyword is used to create a child class on the basis of a parent class. It facilitates child class to acquire all the properties and behavior of its parent class.

Points to remember
It maintains an IS-A relationship.
The extends keyword is used for inheritence
Using extends keyword, we can acquire all the properties and behavior of the inbuilt object as well as custom classes.
We can also use a prototype-based approach to achieve inheritance.
<!DOCTYPE html>
<html>
<body>
<script>
class parent
{ show()
{
document.write("parent"+"<br>");
}
}
class drv extends parent {  
display()  
{
document.write("child"+"<br>");
}
}
var d=new drv();
d.show();
d.display();
</script>

</body>
</html>
---------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Vehicle
{  
 run()
  {console.log("Vehicle is run ");}  
}  
//Creating a child class  
class Bike extends Vehicle
{      
     running()
  {
console.log("Vehicle is running");}  
}  

let obj = new Bike();  
   
  obj.run();
  obj.running();  
   
 
</script>
</body>
</html>
------------------------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Employee{  
 salary=40000;  
}  
class Programmer extends Employee{  
  bonus=10000;  
}
 
   let p=new Programmer();  
   console.log("Programmer salary is:"+p.salary);  
   console.log("Bonus of Programmer is:"+p.bonus);  
 
 
</script>
</body>
</html>
<!DOCTYPE html>
<html>
<body>
<script>
class Addition
{
    a=100;
    b=200;

}
class Subtract extends Addition  {  
 c=3000;
 d=1000;

}
var d=new Subtract  ();
document.write(d.a+d.b);
document.write(d.c-d.d);
</script>

</body>
</html>

---------------

Single Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{
 
 eat()
   {
     console.log("eating...");}  
   }
 
class Dog extends Animal
{  
  bark()
{
     console.log("barking...");
}  
}  
 
let d=new Dog();  
d.bark();  
d.eat();  
 

 
</script>
</body>
</html>

-------------------------------
Multilevel Inheritance Example

<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");
  }  
}  
class Dog extends Animal{  
 bark(){console.log("barking...");}  
}  
class BabyDog extends Dog{  
 weep(){console.log("weeping...");}  
}  
let d=new BabyDog();  
d.weep();  
d.bark();  
d.eat();  
</script>
</body>
</html>
-------------------------
Hierarchical Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");}  
}  
class Dog extends Animal{  
  bark(){console.log("barking...");}  
}  
class Cat extends Animal{  
  meow(){console.log("meowing...");}  
}  
let c=new Cat();
let d=new Dog();
c.meow();  
c.eat();  
d.bark();
d.eat();  
</script>
</body>
</html>

=========================================================================================================================================================================================

JavaScript Encapsulation
-------------------------------------------------------
The JavaScript Encapsulation is basically a process of binding the data with the functions acting on the same data and allows to control and validate the data. There are two methods to achieve an encapsulation in the JavaScript: -
By using setter methods to set the data and getter methods to receive that data.
By using var keyword to make data members private.
Using these following properties, encapsulation in JavaScript allows us to handle an object:
Write only :Only the setter methods is used in this case.
Read/Write :In this property, getter method is used to read the data and the setter method is used to set the data.
Read only :Only the getter methods used in this case.
Examples of JavaScript Encapsulation
1. Here is an example of encapsulation that contains two data members with its setter and getter methods:
<script>  
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
      this.marks=marks;  
    }  
 
    }  
    var stud=new Student();  
     stud.setName("Anand");  
     stud.setMarks(95);  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>
Output :Anand 95
2. JavaScript Encapsulation example in the context of validation
Here is an example to validate the marks of a student:
<script>
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
        if(marks<0||marks>100)  
        {  
          alert("Invalid Marks");  
        }  
      else  
        {  
          this.marks=marks;  
        }  
    }  
    }  
    var stud=new Student();  
     stud.setName("Sonu");  
     stud.setMarks(110);//alert() invokes  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>
Output :Anand undefined
3. JavaScript Encapsulation example in the context of Prototype-based approach.
Here is an example where prototype based encapsulation is performed:
<script>
function Student(name,marks)  
{  
  var s_name=name;  
  var s_marks=marks;  
  Object.defineProperty(this,"name",{  
    get:function()  
    {  
      return s_name;  
    },  
  set:function(s_name)  
  {  
    this.s_name=s_name;  
  }  
   
});  
   
    Object.defineProperty(this,"marks",{  
    get:function()  
    {  
      return s_marks;  
    },  
  set:function(s_marks)  
  {  
    this.s_marks=s_marks;  
  }  
   
});  
   
}  
  var stud=new Student("Anand",95);  
  document.writeln(stud.name+" "+stud.marks);  
</script>
Output :Anand 95

=======================
JavaScript Abstraction
The JavaScript abstraction is basically a process of hiding the implementation details and displaying only the functionality to all the users. In simple words we can say, JavaScript Abstraction ignores the irrelevant details and display only the necessary ones.
Please note that the following are the points to remember:
JavaScript Abstraction reduces the duplication of the code.
Please note that an instance of Abstract Class cannot be created.
Examples of JavaScript Abstraction
1. This example depicts whether users can create an instance of Abstract class or not.
<script>  
//Creating a constructor function  
function Vehicle()  
{  
    this.vehicleName= vehicleName;  
    throw new Error("An instance of Abstract class cannot be created");  
 
}  
Vehicle.prototype.display=function()  
{  
    return this.vehicleName;  
}  
var vehicle=new Vehicle();  
</script>  
Output :An instance of Abstract class cannot be created
2. Here is an example to achieve abstraction
<script>  
//Creating a constructor function  
 function Vehicle()  
{  
    this.vehicleName="vehicleName";  
    throw new Error("An instance of Abstract Class cannot be created");  

}  
Vehicle.prototype.display=function()  
{  
    return "Vehicle is: "+this.vehicleName;  
}  
//Creating a constructor function  
function Bike(vehicleName)  
{  
    this.vehicleName=vehicleName;  
}  
//Creating object without using the function constructor  
Bike.prototype=Object.create(Vehicle.prototype);  
var bike=new Bike("Suzuki");  
document.writeln(bike.display());  
 </script>  
Output :Vehicle is: Suzuki
3. In the following example, there is a depiction of the use of instanceof operator to test whether the object refers to the corresponding class.
<script>  
//Creating a constructor function  
 function Vehicle()  
{  
    this.vehicleName=vehicleName;  
    throw new Error("You cannot create an instance of Abstract class");  
}  
//Creating a constructor function  
function Bike(vehicleName)  
{  
    this.vehicleName=vehicleName;  
}  
Bike.prototype=Object.create(Vehicle.prototype);  
var bike=new Bike("Honda");  
document.writeln(bike instanceof Vehicle);  
document.writeln(bike instanceof Bike);  
</script>  
**************************************
---------------------------------------

JavaScript Inheritance
JavaScript Inheritance
The JavaScript inheritance is basically a mechanism that allows the users to create new classes on the basis of the already existing classes. JavaScript Inheritance delivers flexibility to the child class in order to reuse the methods and variables of a parent class.
In order to create a child class on the basis of a parent class JavaScript extends keyword is used. JavaScript extends keyword facilitates its child class to obtain all the properties and behavior of its parent class.
Please note that the following mentioned points are recommended to keep in mind:
All the properties and behavior of the inbuilt object as well as custom classes can be acquired by using extends keyword.
A prototype-based approach can also be used by the user to achieve inheritance.
An IS-A relationship is maintained by the JavaScript Inheritance.
The extends keyword is generally used in class expressions or class declarations.
Examples of JavaScript extends
1. JavaScript extends example in the context of inbuilt object.
Here is this example date object is extended to display the today's date:
<script>  
class DateTime extends Date
{  
  constructor()
  {  
    super();  
  }
}  
var m=new DateTime();  
document.writeln("Current date:")  
document.writeln(m.getDate()+"-"+(m.getMonth()+1)+"-"+m.getFullYear());  
</script>  
Output:Current date: 25-11-2019
Here is another example displaying the year value from the given date:
<script>  
class DateTime extends Date
{  
  constructor(year)
  {  
    super(year);  
  }
}  
var m=new DateTime("November 15,2019 20:22:10");  
document.writeln("Year value:")  
document.writeln(m.getFullYear());  
</script>  
Output:Year value: 1947
2. JavaScript extends example in the context of custom class
Here, in this example sub-class that extends the properties of its parent class is declared:

<script>
class Bike  
{  
  constructor()  
  {  
    this.company="suzuki";  
  }  
}  
class Vehicle extends Bike {  
  constructor(name,price) {  
   super();  
    this.name=name;  
    this.price=price;  
  }  
}  
var v = new Vehicle("Hayabusa","1400000");  
document.writeln(v.company+" "+v.name+" "+v.price);  
</script>
Output:suzuki Hayabusa 1400000
3. JavaScript extends example in the context of a prototype based approach.
In the following example, prototype based inheritance is performed. There is no need to use class and extends keywords in this approach.
<script>  
//Constructor function  
function Bike(company)  
{  
    this.company=company;  
}  
 
Bike.prototype.getCompany=function()  
{  
  return this.company;  
}  
//Another constructor function  
function Vehicle(name,price) {  
 this.name=name;  
  this.price=price;  
  }  
var bike = new Bike("Suzuki");  
Vehicle.prototype=bike; //Now Bike treats as a parent of Vehicle.  
var vehicle=new Vehicle("Hayabusa",1400000);  
document.writeln(vehicle.getCompany()+" "+vehicle.name+" "+vehicle.price);  
</script>
Output:Suzuki Hayabusa 1400000
===============================
 
JavaScript Polymorphism
The JavaScript polymorphism is basically a core concept of object-oriented paradigm providing a way so that a single action can be performed in different forms. Polymorphism provides an ability to call the very same method on various JavaScript objects. Since JavaScript is not a type-safe language, users can pass any type of data members with the methods.
Examples of JavaScript polymorphism
1. Here is an example where a child class object invokes the parent class method:
<script>
class A
  {
     display()
    {
      document.writeln("space is invoked");
    }
  }
class B extends A
  {
  }
var b=new B();
b.display();
</script>
Output :space is invoked
2. In the following example, a child and parent class contains the same method. This example depicts that the object of child class invokes both classes method.
<script>
class A
  {
     display()
    {
      document.writeln("space is invoked<br>");
    }
  }
class B extends A
  {
    display()
    {
      document.writeln("spacex is invoked");
    }
  }

var a=[new A(), new B()]
a.forEach(function(msg)
{
msg.display();
});
</script>
Output :
space is invoked
spacex is invoked
3. Here is an example depicting with prototype-based approach.
<script>  
function A()  
{  
}  
A.prototype.display=function()  
{  
  return "A is invoked";  
}  
function B()  
{  
   
}  
 
B.prototype=Object.create(A.prototype);  
 
var a=[new A(), new B()]  
 
a.forEach(function(msg)  
{  
  document.writeln(msg.display()+"<br>");  
});  
</script>  
Output :
A is invoked
A is invoked
=================


JavaScript Template Literals
Synonyms:

 
Back-Tics Syntax
Template Literals use back-ticks (``) rather than the quotes ("") to define a string:
` ` '   '   " "
var a="indore"
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>Template literals use back-ticks (``) to define a string:</p>

 

<p>Template literals are not supported in Internet Explorer.</p>

<script>
let text = `Hello world!`;
document.write(text);
</script>

</body>
</html>

Quotes Inside Strings
With template literals, you can use both single and double quotes inside a string:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>With back-ticks, you can use both single and double quotes inside a string:</p>

 

<p>Template literals are not supported in Internet Explorer.</p>

<script>
let text = `He's often called "Johnny"`;
let text = "He's often called "Johnny" ";
document.write(text);
</script>

</body>
</html>

Multiline Strings
Template literals allows multiline strings:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>Template literals allows multiline strings:</p>

 

<p>Template literals are not supported in Internet Explorer.</p>

<script>
let text ="The quick
brown fox
jumps over
the lazy dog";

document.write(text);
</script>

</body>
</html>
-------------------------------------------
Interpolation
Template literals provide an easy way to interpolate variables and expressions into strings.

The method is called string interpolation.

 syntax is:

${...}

Variable Substitutions
Template literals allow variables in strings:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>Template literals allows variables in strings:</p>

 
<p>Template literals are not supported in Internet Explorer.</p>

<script>
let firstName = "John";
let lastName = "Doe";

a=34;
b=43;
c=a+b;
console.log(`sum=  ${c}`)
document.write(firstname+"  " +lastname);

let text = `Welcome ${firstName}, ${lastName}!`;

document.write(text);
</script>

</body>
</html>



===========================

<!DOCTYPE html>
<html>
<body>

<div style="text-align:center">
  <button onclick="playPause()">Play/Pause</button>
  <button onclick="makeBig()">Big</button>
  <button onclick="makeSmall()">Small</button>
  <button onclick="makeNormal()">Normal</button>
  <br>
  <video id="video1" width="420">
    <source src="E:\HTML\shee html\audio-video\mov_bbb.mp4" type="video/mp4">
  </video>
</div>

<script>
var myVideo = document.getElementById("video1");

function playPause() {
    if (myVideo.paused)
        myVideo.play();
    else
        myVideo.pause();
}

function makeBig() {
    myVideo.width = 560;
}

function makeSmall() {
    myVideo.width = 320;
}

function makeNormal() {
    myVideo.width = 420;
}
</script>

</body>
</html>
======================================================================================================================

Friday i m on leave .....some personal work
Sat ur class will continue

On Wed, 2 Nov, 2022, 1:57 pm vandana malviya, <vandana2022malviya@gmail.com> wrote:
JavaScript Constructor Method

A JavaScript constructor method is a special type of method which is used to initialize and create an object. It is called when memory is allocated for an object.

1)The constructor keyword is used to declare a constructor method.
2)The class can contain only one constructor method.
3)JavaScript allows us to use parent class constructor through super keyword.

Types of Java constructors
There are two types of constructors in JavaSCRIPT:
1. Default constructor (no-arg constructor)
2. Parameterized constructor

________________________________________
Java Default Constructor
A constructor is called "Default Constructor" when it doesn't have any parameter.

class Employee {  
  constructor() {  
  document.write("default constructor invoke");  
  }  
}  
var emp = new Employee();  
var emp1 = new Employee();  

<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript">
    class Fact
        {  
  constructor()
   {  
  var n=+(prompt("Enter any no"));
  var i=1;
  for(i=1;i<=10;i++)
  {
     document.write(n*i+"<br>");
  }
  }  
}  
var f = new Fact();  
    </script>
</head>
<body>

</body>
</html>




Constructor Method Example
Let's see a simple example of a constructor method.

<script>  
class Employee {  
  constructor() {  
    this.id=101;  
    this.name = "ram";  
  }  
}  
var emp = new Employee();  
document.writeln(emp.id+" "+emp.name);
var emp1 = new Employee();  
document.writeln(emp1.id+" "+emp1.name);  
</script>  
 
**********************************

<html>
<body>
<script>
class Student
  {
    constructor()
    {
       var name,per,p,c,m,t;
    }
        getData()
        {  this.name= prompt("Enter name");        
           this.p=parseInt(prompt("Enter phy marks"));
           this.c=parseInt(prompt("Enter che marks"));
           this.m=parseInt(prompt("Enter mat marks"));
        }
        calci()
     {   this.t=this.p+this.c+this.m;
         this.per=this.t/3;
   
     }
      showData()
      {
        document.write("name="+this.name+"<br>");
        document.write("total="+this.t+"<br>");
        document.write("per="+this.per+"<br>");
      }      
     

    }
   
    var stud=new Student();
     stud.getData();// initlise
     stud.calci();
     stud.showData();//alert() invokes
</script>

</body>
</html>


----------------------------------------------------
CONSTRUCTOR
1) DEFAULT =

<html>
<script>
class student {

constructor()
 {
   document.write("<br>"+"DEFAULT CONSTRUCTOR CALL");
 }

}
let a=new student();
let b=new student();

</script>
</html>

A constructor is a special function that creates and initializes an object instance of a class. In JavaScript, a constructor gets called when an object is created using the new keyword.

 The purpose of a constructor is to create a new object and set values for any existing object properties.

A new empty object gets created.

The this keyword begins to refer to the new object and it becomes the current instance object.

The new object is then returned as the return value of the constructor.
 

====================
PARAMETRIZED CONSTRUCTOR AND FUNCTION
when we pass argument in constructor known as parametrized
constructor
===========================
emp         id name salary    da =bs*20%   hra=bs *40% gs=bs+da+hra
<html>
<head>
<script>
class student {
constructor(a,b)
 {
this.first=a;
this.second=b;
}
    sum()
   {
  document.write(this.first+this.second);
  }
     sub ()
  {  
  return (this.first-this.second);
        }
 display  () {
  document.write("<br>"+"hello");  
}
}
 let obj=new student(100,80);
  obj.sum();
 document.write("sub="+obj.sub());
or
/* var x=obj.sub()
document.write("Sub="+x);*/

 obj.display();
</script>
</head>
<body>


  </body>
</html>






 <html>
<head>
<script>
class student {

constructor(a,b)
 {
this.first=a;
this.second=b;
this.sum = function ()
   {
  return (this.first+this.second);
  }
this.sub = function ()
  {    
  return (this.first-this.second);
    }
this.display = function () {
    document.write("<br>"+"hello");
  }
}}
 let obj=new student(100,80);
 document.write("sum"+obj.sum()+"<br>");
 document.write("sub="+obj.sub());
 obj.display();

</script>
</head>
<body>
  </body>
</html>
===========================
 <html>
<head>
<script>
class Calculator {
constructor(x,y)
 {
this.first=x;
this.second=y;
this.sum = function ()
   {
  return (this.first+this.second);
  }
this.sub = function ()
  {    
  return (this.first-this.second);
                 }
this.mult = function ()
  {    
  return (this.first*this.second);
                 }
   
this.div = function ()
  {    
  return (this.first/this.second);
                 }

}


}
 var x=parseInt(prompt("Enter 1st no"))
var y=parseInt(prompt("Enter 2nd no"))
 let obj=new Calculator(x,y);

 document.write("sum"+obj.sum()+"<br>");
 document.write("sub="+obj.sub()+"<br>");
 document.write("mult"+obj.mult()+"<br>");
 document.write("div="+obj.div()+"<br>");
 
 obj.display();

</script>
</head>
<body>
  </body>
</html>

-------------------------------------------------
<html>
<script>
class student {
constructor(a,b,c)  
{
this.tot=a+b+c;
this.p=this.tot/3;

this.per=function()
{ document.write("per="+this.p);
}
this.div=function()
{
if(p>=60)
document.write("1st div");
else
if(p>=50)
document.write("2nd div");
    else
    if(p>=40)
     document.write("3rd div");
}
}
}
var p,c,m;
p=parseInt(prompt("Enter p"));
c=parseInt(prompt("Enter c"));
m=parseInt(prompt("Enter m"));
let a=new student(p,c,m);
a.per();
a.div();
</script>
</html>

===================================================================================================================================================================================================================================================================================================================

vandana malviya <vandana2022malviya@gmail.com>
Sat, Nov 5, 2022, 2:01 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

JavaScript static Method
The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance(object) is not required to call the static method. These methods are called directly on the class itself.

Points to remember
1)The static keyword is used to declare a static method.
2)The static method can be of any name.
3)A class can contain more than one static method.
4)If we declare more than one static method with a similar name, the JavaScript always invokes the last one.
5)The static method can be used to create utility functions.
6)We can use this keyword to call a static method within another static method.
7)We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.

JavaScript static Method Example 1


<!DOCTYPE html>
<html>
<body>

<script>
class Test
{
  static display()
  {
    return "static method is invoked"
  }
}
document.write(Test.display());
</script>

</body>
</html>
-------------------------------------
Example 2
Le's see an example to invoke more than one static method.
<!DOCTYPE html>
<html>
<body>
<script>
class Test
{
  static display1()
  {
    return "static method is invoked"
  }
  static display2()
  {
    return "static method is invoked again"
  }
}

document.writeln(Test.display1()+"<br>");
document.writeln(Test.display2());
</script>

</body>
</html>

Example 3
Let's see an example to invoke more than one static method with similar names.

<!DOCTYPE html>
<html>
<body>

<script>
class Test
{
  static display()
  {
    return "static method is invoked"
  }
  static display()
  {
    return "static method is invoked again"
  }
}
document.write(Test.display());
</script>

</body>
</html>

 --------------------------
Example 4
Let's see an example to invoke a static method within the constructor.

<!DOCTYPE html>
<html>
<body>

<script>
class Test {
  constructor() {
  document.writeln(Test.display()+"<br>");
  document.writeln(this.constructor.display());
  }
  static display() {
      return "static method is invoked"
  }
}
var t=new Test();
</script>
</body>
</html>
------------------------------
Example 5
Let's see an example to invoke a static method within the non-static method.
 
<!DOCTYPE html>
<html>
<body>
<script>
class Test {
  static display() {
      return "static method is invoked"
  }  
 show() {
  document.writeln(Test.display()+"<br>");
  }  
}
var t=new Test();
t.show();
</script>
</body>
</html>
--------------------------------------------------
<html>
<body>
<script>
class Student
  {
    constructor()
    {
       var name,per,p,c,m,t;
    }
        getData()
        {  this.name= prompt("Enter name");        
           this.p=parseInt(prompt("Enter phy marks"));
           this.c=parseInt(prompt("Enter che marks"));
           this.m=parseInt(prompt("Enter mat marks"));
        }
        calci()
     {   this.t=this.p+this.c+this.m;
         this.per=this.t/3;
     }
      showData()
      {
        document.write("name="+this.name+"<br>");
        document.write("total="+this.t+"<br>");
        document.write("per="+this.per+"<br>");
      }      
     

    }
   
    var stud=new Student();
     stud.getData();
     stud.calci();
     stud.showData();//alert() invokes
</script>

</body>
</html>


JavaScript Encapsulation
The JavaScript Encapsulation is a process of binding the data (i.e. variables) with the functions acting on that data. It allows us to control the data and validate it. To achieve an encapsulation in JavaScript: -

Use var keyword to make data members private.

Use setter methods to set the data and getter methods to get that data.
The encapsulation allows us to handle an object using the following properties:

Read/Write - Here, we use setter methods to write the data and getter methods read that data.

Read Only - In this case, we use getter methods only.

Write Only - In this case, we use setter methods only.

JavaScript Encapsulation Example
Let's see a simple example of encapsulation that contains two data members with its setter and getter methods.


<script>  
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
      this.marks=marks;  
    }    
    }  
    var stud=new Student();
    var a=prompt("Enter name");
     stud.setName(a);  
     stud.setMarks(80);  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>  


------------

JavaScript Encapsulation Example: Validate
In this example, we validate the marks of the student.

<!DOCTYPE html>
<html>
<body>

<script>
class Student
  {
    constructor()
    {
       var name;
       var marks;
    }
        getName()
        {
          return this.name;
        }
      setName(name)
      {
        this.name=name;
      }
     
      getMarks()
      {
        return this.marks;
      }
    setMarks(marks)
    {
        if(marks<0||marks>100)
        {
          alert("Invalid Marks");
        }
      else
        {
          this.marks=marks;
        }
    }
    }
    var stud=new Student();
     stud.setName("John");
     stud.setMarks(110);//alert() invokes
     document.writeln(stud.getName()+" "+stud.getMarks());
</script>

</body>
</html>

 
--------------------------
JavaScript Encapsulation Example: Prototype-based approach
Here, we perform prototype-based encapsulation.

<!DOCTYPE html>
<html>
<body>

<script>
function Student(name,marks)
{
  var s_name=name;
  var s_marks=marks;
  Object.defineProperty(this,"name",{
    get:function()
    {
      return s_name;
    },
  set:function(s_name)
  {
    this.s_name=s_name;
  }
 
});
 
    Object.defineProperty(this,"marks",{
    get:function()
    {
      return s_marks;
    },
  set:function(s_marks)
  {
    this.s_marks=s_marks;
  }
 
});
 
}
  var stud=new Student("John",80);
  document.writeln(stud.name+" "+stud.marks);
</script>

</body>
</html>

 ------------------------------------------
JavaScript Inheritance
The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.

The JavaScript extends keyword is used to create a child class on the basis of a parent class. It facilitates child class to acquire all the properties and behavior of its parent class.

Points to remember
It maintains an IS-A relationship.
The extends keyword is used for inheritence
Using extends keyword, we can acquire all the properties and behavior of the inbuilt object as well as custom classes.
We can also use a prototype-based approach to achieve inheritance.
<!DOCTYPE html>
<html>
<body>
<script>
class parent
{ show()
{
document.write("parent"+"<br>");
}
}
class drv extends parent {  
display()  
{
document.write("child"+"<br>");
}
}
var d=new drv();
d.show();
d.display();
</script>

</body>
</html>
---------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Vehicle
{  
 run()
  {console.log("Vehicle is run ");}  
}  
//Creating a child class  
class Bike extends Vehicle
{      
     running()
  {
console.log("Vehicle is running");}  
}  

let obj = new Bike();  
   
  obj.run();
  obj.running();  
   
 
</script>
</body>
</html>
------------------------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Employee{  
 salary=40000;  
}  
class Programmer extends Employee{  
  bonus=10000;  
}
 
   let p=new Programmer();  
   console.log("Programmer salary is:"+p.salary);  
   console.log("Bonus of Programmer is:"+p.bonus);  
 
 
</script>
</body>
</html>
<!DOCTYPE html>
<html>
<body>
<script>
class Addition
{
    a=100;
    b=200;

}
class Subtract extends Addition  {  
 c=3000;
 d=1000;

}
var d=new Subtract  ();
document.write(d.a+d.b);
document.write(d.c-d.d);
</script>

</body>
</html>

---------------

Single Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{
 
 eat()
   {
     console.log("eating...");}  
   }
 
class Dog extends Animal
{  
  bark()
{
     console.log("barking...");
}  
}  
 
let d=new Dog();  
d.bark();  
d.eat();  
 

 
</script>
</body>
</html>

-------------------------------
Multilevel Inheritance Example

<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");
  }  
}  
class Dog extends Animal{  
 bark(){console.log("barking...");}  
}  
class BabyDog extends Dog{  
 weep(){console.log("weeping...");}  
}  
let d=new BabyDog();  
d.weep();  
d.bark();  
d.eat();  
</script>
</body>
</html>
-------------------------
Hierarchical Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");}  
}  
class Dog extends Animal{  
  bark(){console.log("barking...");}  
}  
class Cat extends Animal{  
  meow(){console.log("meowing...");}  
}  
let c=new Cat();
let d=new Dog();
c.meow();  
c.eat();  
d.bark();
d.eat();  
</script>
</body>
</html>

============================================================================================================================================================================================================================================================================================================

vandana malviya <vandana2022malviya@gmail.com>
Sat, Nov 5, 2022, 2:01 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

JavaScript static Method
The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance(object) is not required to call the static method. These methods are called directly on the class itself.

Points to remember
1)The static keyword is used to declare a static method.
2)The static method can be of any name.
3)A class can contain more than one static method.
4)If we declare more than one static method with a similar name, the JavaScript always invokes the last one.
5)The static method can be used to create utility functions.
6)We can use this keyword to call a static method within another static method.
7)We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.

JavaScript static Method Example 1


<!DOCTYPE html>
<html>
<body>

<script>
class Test
{
  static display()
  {
    return "static method is invoked"
  }
}
document.write(Test.display());
</script>

</body>
</html>
-------------------------------------
Example 2
Le's see an example to invoke more than one static method.
<!DOCTYPE html>
<html>
<body>
<script>
class Test
{
  static display1()
  {
    return "static method is invoked"
  }
  static display2()
  {
    return "static method is invoked again"
  }
}

document.writeln(Test.display1()+"<br>");
document.writeln(Test.display2());
</script>

</body>
</html>

Example 3
Let's see an example to invoke more than one static method with similar names.

<!DOCTYPE html>
<html>
<body>

<script>
class Test
{
  static display()
  {
    return "static method is invoked"
  }
  static display()
  {
    return "static method is invoked again"
  }
}
document.write(Test.display());
</script>

</body>
</html>

 --------------------------
Example 4
Let's see an example to invoke a static method within the constructor.

<!DOCTYPE html>
<html>
<body>

<script>
class Test {
  constructor() {
  document.writeln(Test.display()+"<br>");
  document.writeln(this.constructor.display());
  }
  static display() {
      return "static method is invoked"
  }
}
var t=new Test();
</script>
</body>
</html>
------------------------------
Example 5
Let's see an example to invoke a static method within the non-static method.
 
<!DOCTYPE html>
<html>
<body>
<script>
class Test {
  static display() {
      return "static method is invoked"
  }  
 show() {
  document.writeln(Test.display()+"<br>");
  }  
}
var t=new Test();
t.show();
</script>
</body>
</html>
--------------------------------------------------
<html>
<body>
<script>
class Student
  {
    constructor()
    {
       var name,per,p,c,m,t;
    }
        getData()
        {  this.name= prompt("Enter name");        
           this.p=parseInt(prompt("Enter phy marks"));
           this.c=parseInt(prompt("Enter che marks"));
           this.m=parseInt(prompt("Enter mat marks"));
        }
        calci()
     {   this.t=this.p+this.c+this.m;
         this.per=this.t/3;
     }
      showData()
      {
        document.write("name="+this.name+"<br>");
        document.write("total="+this.t+"<br>");
        document.write("per="+this.per+"<br>");
      }      
     

    }
   
    var stud=new Student();
     stud.getData();
     stud.calci();
     stud.showData();//alert() invokes
</script>

</body>
</html>


JavaScript Encapsulation
The JavaScript Encapsulation is a process of binding the data (i.e. variables) with the functions acting on that data. It allows us to control the data and validate it. To achieve an encapsulation in JavaScript: -

Use var keyword to make data members private.

Use setter methods to set the data and getter methods to get that data.
The encapsulation allows us to handle an object using the following properties:

Read/Write - Here, we use setter methods to write the data and getter methods read that data.

Read Only - In this case, we use getter methods only.

Write Only - In this case, we use setter methods only.

JavaScript Encapsulation Example
Let's see a simple example of encapsulation that contains two data members with its setter and getter methods.


<script>  
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
      this.marks=marks;  
    }    
    }  
    var stud=new Student();
    var a=prompt("Enter name");
     stud.setName(a);  
     stud.setMarks(80);  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>  


------------

JavaScript Encapsulation Example: Validate
In this example, we validate the marks of the student.

<!DOCTYPE html>
<html>
<body>

<script>
class Student
  {
    constructor()
    {
       var name;
       var marks;
    }
        getName()
        {
          return this.name;
        }
      setName(name)
      {
        this.name=name;
      }
     
      getMarks()
      {
        return this.marks;
      }
    setMarks(marks)
    {
        if(marks<0||marks>100)
        {
          alert("Invalid Marks");
        }
      else
        {
          this.marks=marks;
        }
    }
    }
    var stud=new Student();
     stud.setName("John");
     stud.setMarks(110);//alert() invokes
     document.writeln(stud.getName()+" "+stud.getMarks());
</script>

</body>
</html>

 
--------------------------
JavaScript Encapsulation Example: Prototype-based approach
Here, we perform prototype-based encapsulation.

<!DOCTYPE html>
<html>
<body>

<script>
function Student(name,marks)
{
  var s_name=name;
  var s_marks=marks;
  Object.defineProperty(this,"name",{
    get:function()
    {
      return s_name;
    },
  set:function(s_name)
  {
    this.s_name=s_name;
  }
 
});
 
    Object.defineProperty(this,"marks",{
    get:function()
    {
      return s_marks;
    },
  set:function(s_marks)
  {
    this.s_marks=s_marks;
  }
 
});
 
}
  var stud=new Student("John",80);
  document.writeln(stud.name+" "+stud.marks);
</script>

</body>
</html>

 ------------------------------------------
JavaScript Inheritance
The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.

The JavaScript extends keyword is used to create a child class on the basis of a parent class. It facilitates child class to acquire all the properties and behavior of its parent class.

Points to remember
It maintains an IS-A relationship.
The extends keyword is used for inheritence
Using extends keyword, we can acquire all the properties and behavior of the inbuilt object as well as custom classes.
We can also use a prototype-based approach to achieve inheritance.
<!DOCTYPE html>
<html>
<body>
<script>
class parent
{ show()
{
document.write("parent"+"<br>");
}
}
class drv extends parent {  
display()  
{
document.write("child"+"<br>");
}
}
var d=new drv();
d.show();
d.display();
</script>

</body>
</html>
---------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Vehicle
{  
 run()
  {console.log("Vehicle is run ");}  
}  
//Creating a child class  
class Bike extends Vehicle
{      
     running()
  {
console.log("Vehicle is running");}  
}  

let obj = new Bike();  
   
  obj.run();
  obj.running();  
   
 
</script>
</body>
</html>
------------------------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Employee{  
 salary=40000;  
}  
class Programmer extends Employee{  
  bonus=10000;  
}
 
   let p=new Programmer();  
   console.log("Programmer salary is:"+p.salary);  
   console.log("Bonus of Programmer is:"+p.bonus);  
 
 
</script>
</body>
</html>
<!DOCTYPE html>
<html>
<body>
<script>
class Addition
{
    a=100;
    b=200;

}
class Subtract extends Addition  {  
 c=3000;
 d=1000;

}
var d=new Subtract  ();
document.write(d.a+d.b);
document.write(d.c-d.d);
</script>

</body>
</html>

---------------

Single Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{
 
 eat()
   {
     console.log("eating...");}  
   }
 
class Dog extends Animal
{  
  bark()
{
     console.log("barking...");
}  
}  
 
let d=new Dog();  
d.bark();  
d.eat();  
 

 
</script>
</body>
</html>

-------------------------------
Multilevel Inheritance Example

<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");
  }  
}  
class Dog extends Animal{  
 bark(){console.log("barking...");}  
}  
class BabyDog extends Dog{  
 weep(){console.log("weeping...");}  
}  
let d=new BabyDog();  
d.weep();  
d.bark();  
d.eat();  
</script>
</body>
</html>
-------------------------
Hierarchical Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");}  
}  
class Dog extends Animal{  
  bark(){console.log("barking...");}  
}  
class Cat extends Animal{  
  meow(){console.log("meowing...");}  
}  
let c=new Cat();
let d=new Dog();
c.meow();  
c.eat();  
d.bark();
d.eat();  
</script>
</body>
</html>

=======================================================================================================================================================================================================================================================================================================

SUPER,OBJECT BASED
Inbox

vandana malviya <vandana2022malviya@gmail.com>
Tue, Nov 8, 2022, 2:10 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34

JavaScript Inheritance
The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.

The JavaScript extends keyword is used to create a child class on the basis of a parent class. It facilitates child class to acquire all the properties and behavior of its parent class.

Points to remember
It maintains an IS-A relationship.
The extends keyword is used for inheritence
Using extends keyword, we can acquire all the properties and behavior of the inbuilt object as well as custom classes.
We can also use a prototype-based approach to achieve inheritance.
<!DOCTYPE html>
<html>
<body>
<script>
class parent
{ show()
{
document.write("parent"+"<br>");
}
}
class drv extends parent {  
display()  
{
document.write("child"+"<br>");
}
}
var d=new drv();
d.show();
d.display();
</script>

</body>
</html>
---------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Vehicle
{  
 run()
  {console.log("Vehicle is run ");}  
}  
//Creating a child class  
class Bike extends Vehicle
{      
     running()
  {
console.log("Vehicle is running");}  
}  

let obj = new Bike();  
   
  obj.run();
  obj.running();  
   
 
</script>
</body>
</html>
------------------------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Employee{  
 salary=40000;  
}  
class Programmer extends Employee{  
  bonus=10000;  
}
 
   let p=new Programmer();  
   console.log("Programmer salary is:"+p.salary);  
   console.log("Bonus of Programmer is:"+p.bonus);  
 
 
</script>
</body>
</html>
<!DOCTYPE html>
<html>
<body>
<script>
class Addition
{
    a=100;
    b=200;

}
class Subtract extends Addition  {  
 c=3000;
 d=1000;

}
var d=new Subtract  ();
document.write(d.a+d.b);
document.write(d.c-d.d);
</script>

</body>
</html>

---------------

Single Inheritance Example
<!DOCTYPE html>
<html>
<body>
<script>
class Animal{
 
 eat()
   {
     console.log("eating...");}  
   }
 
class Dog extends Animal
{  
  bark()
{
     console.log("barking...");
}  
}  
 
let d=new Dog();  
d.bark();  
d.eat();  
 

 
</script>
</body>
</html>

-------------------------------
Multilevel Inheritance Example

<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");
  }  
}  
class Dog extends Animal{  
 bark(){console.log("barking...");}  
}  
class BabyDog extends Dog{  
 weep(){console.log("weeping...");}  
}  
 
let d=new BabyDog();  
d.weep();  
d.bark();  
d.eat();  
 
</script>
</body>
</html>
-------------------------
Hierarchical Inheritance Example

<!DOCTYPE html>
<html>
<body>
<script>
class Animal{  
 eat(){
  console.log("eating...");}  
}  
class Dog extends Animal{  
  bark(){console.log("barking...");}  
}  
class Cat extends Animal{  
  meow(){console.log("meowing...");}  
}  
 
let c=new Cat();
let d=new Dog();
c.meow();  
c.eat();  

d.bark();
d.eat();  
 
</script>
</body>
</html>


------------------------------------------------
Method Overriding
If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Javascript.
In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.
Usage of Java Method Overriding
o Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
o
1. The method must have the same name as in the parent class
2. The method must have the same parameter as in the parent class.
3. There must be an IS-A relationship (inheritance).

Understanding the problem without method overriding
Let's understand the problem that we may face in the program if we don't use method overriding.

<!DOCTYPE html>
<html>
<body>
<script>
class Vehicle{  
 run(){console.log("Vehicle is running");}  
}  
//Creating a child class  
class Bike extends Vehicle{  
   }
 let obj = new Bike();  
   
  obj.run();  
   
</script>
</body>
</html>
----------------------------------------------
Example of method overriding
In this example, we have defined the run method in the subclass as defined in the parent class but it has some specific implementation. The name and parameter of the method are the same, and there is IS-A relationship between the classes, so there is method overriding.

<!DOCTYPE html>
<html>
<body>
<script>
class Vehicle{    
   run()
   {
    console.log("Vehicle is running");
 }  
}  
class Bike2 extends Vehicle
{  
   run()
   {
    console.log("Bike is running safely");
    }  
 }
   
  let obj = new Bike2();//creating object  
  obj.run();//calling method  
   let a= new Vehicle();
  a.run();
</script>
</body>
</html>


--------------------

A real example of Java Method Overriding
Consider a scenario where Bank is a class that provides functionality to get the rate of interest. However, the rate of interest varies according to banks. For example, SBI, ICICI and AXIS banks could provide 8%, 7%, and 9% rate of interest.

<!DOCTYPE html>
<html>
<body>
<script>
class Bank
{  
  getRateOfInterest()
{
return 1;
}  
}  
//Creating child classes.  
class SBI extends Bank{  
 getRateOfInterest()
{
return 8;
}  
}  
 
class ICICI extends Bank{  
 getRateOfInterest(){return 7;}  
}  
class AXIS extends Bank{  
  getRateOfInterest(){return 9;}  
}  
//Test class to create objects and call the methods  
 
let s=new SBI();  
let i=new ICICI();  
let a=new AXIS();  
console.log("SBI Rate of Interest: "+s.getRateOfInterest());  
console.log("ICICI Rate of Interest: "+i.getRateOfInterest());  
console.log("AXIS Rate of Interest: "+a.getRateOfInterest());  
 
 
   
</script>
</body>
</html>

-------------------------------------------------


Super Keyword
The super keyword in Javascript is a reference variable which is used to refer immediate parent class object.
Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.
Usage of Java super Keyword
1. super can be used to refer immediate parent class instance variable.
2. super can be used to invoke immediate parent class method.
3. super() can be used to invoke immediate parent class constructor.

1) super is used to refer immediate parent class instance variable.
We can use super keyword to access the data member or field of parent class. It is used if parent class and child class have same fields.





--------------------------------------------

<!DOCTYPE html>
<html>
<body>
<script>
class Base
{ constructor()
{
var a,b;
   }
   inputdataB()
{
this.a=Number(prompt("Enter a"));
this.b=Number(prompt("Enter b"));
}
showdataB()
{
document.write("A= "+this.a +" B="+this.b            +"<br>");
}
}

class Drv extends Base {  
constructor()
{ super();
var c,d;
}
inputdataD()
{
this.c=Number(prompt("Enter c"));
this.d=Number(prompt("Enter d"));
}

showdataD()
{
document.write("C= "+this.c +" D="+this.d
           +"<br>");
}
sum()
{
document.write("Sum"+(this.a+this.b+this.c+this.d ));

}

}
var m=new Drv();
m.inputdataB();
m.inputdataD()
m.showdataB();
m.showdataD();
m.sum();
</script>

</body>
</html>
======================================
<!DOCTYPE html>
<html>
<body>
<script>
    class Student
    {   constructor()
        {
        var rno,name,branch;
        }
        inputdataS()
        {
            this.rno=Number(prompt("Enter Roll no"));
            this.name=prompt("Enter name ");
            this.branch=prompt("Enter branch");
        }              
    }

class Test extends Student {  
    constructor()
    {
       super();
        var p,c,m,tot,per;
    }
inputdataT()
        {
            this.p=Number(prompt("Enter phy marks"));
            this.c=Number(prompt("Enter che marks"));
            this.m=Number(prompt("Enter mat marks"));
        }      

calci ()
{

    this.tot= this.p+this.c+this.m;
    this.per=this.tot/3;
    document.write("Total = "+this.tot +"<br>");
document.write("Per= "+this.per +"<br>");
}        
showdataT()
        {
document.write("Roll No"+this.rno+"<br>");
document.write("Name"+this.name+"<br>");
document.write("phy"+this.p+"<br>");
document.write("Che"+this.c+"<br>");
document.write("Mat = "+this.m +"<br>");
document.write("Total = "+this.tot +"<br>");
document.write("Per= "+this.per +"<br>");

        }      
    }

   
var m=new Test();
m.inputdataS();
m.inputdataT()
m.calci();
m.showdataT();
</script>

</body>
</html>

=================================

<html>
<body>
<script>
  class parent
  {
    constructor(a,b)
    {
      this.a=a;
      this.b=b;
    }
    add()
    {
      document.write( this.a+this.b);
    }  
  }

class drv extends parent
{  
  constructor(a,b,c,d)  
  {  super(a,b);
  }
  sub()
  {
    document.write( this.c-this.d);
  }
}
var m=new drv(10,2,11,14);
m.add();
m.sub();
</script>

</body>
</html>
********************************************
<html>
<body>
<script>
  class parent
  {
    constructor(a,b)
    {
      this.a=a;
      this.b=b;
    }
    add()
    {
      document.write( this.a+this.b);
    }  
  }

class drv extends parent
{  
  constructor(a,b)  
  {  super(a,b);
  }
  sub()
  {
    document.write( this.a-this.b);
  }
}
var m=new drv(10,2);
m.add();
m.sub();
</script>

</body>
</html>
===========================






<!DOCTYPE html>
<html>
<body>

<script>
class Test extends Date {
  constructor() {
    super();
  }}
var m=new Test();
document.writeln("Current date:")
document.writeln(m.getDate()+"-"+(m.getMonth)+1)+"-"+m.getFullYear());
</script>

</body>
</html>

 ----------------------------------------------
Let's see one more example to display the year value from the given date.

<!DOCTYPE html>
<html>
<body>

<script>
class Test extends Date {
  constructor(year) {
    super(year);
  }}
var m=new Test("August 15, 1947 20:22:10");
document.writeln("Year value:")
document.writeln(m.getFullYear());
</script>

</body>
</html>

 
--------------------------------------
<!DOCTYPE html>
<html>
<body>

<script>
class Bike
{
  constructor()
  {
    this.company="Honda";
  }
}
class Vehicle extends Bike {
  constructor(name,price)
 {
   super();// call immediate parent class constructor
    this.name=name;
    this.price=price;
  }
}
var v = new Vehicle("Shine","70000");
document.writeln(v.company+" "+v.name+" "+v.price);
</script>

</body>
</html>


 ----------------------
JavaScript extends Example: a Prototype-based approach
Here, we perform prototype-based inheritance. In this approach, there is no need to use class and extends keywords.

<script>  
//Constructor function  
function Bike(company)  
{  
    this.company=company;  
}  
Bike.prototype.getCompany=function()  
{  
  return this.company;  
}  
//Another constructor function  
function Vehicle(name,price) {  
 this.name=name;  
  this.price=price;  
  }  
var bike = new Bike("Honda");  
Vehicle.prototype=bike; //Now Bike treats as a parent of Vehicle.  
var vehicle=new Vehicle("Shine",70000);  
document.writeln(vehicle.getCompany()+" "+vehicle.name+" "+vehicle.price);  
</script>
=======================================
/ parent class
class Person {
    constructor(name) {
        this.name = name;
    }
    greet() {
        console.log(`Hello ${this.name}`);
    }
}

// inheriting parent class
class Student extends Person
{
}

let student1 = new Student('Jack');
student1.greet();

-------------------------
JavaScript super() keyword
The super keyword used inside a child class denotes
its parent class. For example,

// parent class
class Person {
    constructor(name) {
        this.name = name;
    }
    greet() {
        console.log(`Hello ${this.name}`);
    }
}
// inheriting parent class
class Student extends Person {
    constructor(name) {    
        console.log("Creating student class");        
        // call the super class constructor and pass in the name parameter
        super(name);
    }
}
let student1 = new Student('Jack');
student1.greet();
---------------------

Overriding Method or Property
If a child class has the same method or property name as that of the parent class, it will use the method and property of the child class. This concept is called method overriding. For example,

// parent class
class Person {
    constructor(name) {
        this.name = name;
        this.occupation = "unemployed";
    }
   
    greet() {
        console.log(`Hello ${this.name}.`);
    }
 
}

// inheriting parent class
class Student extends Person {
    constructor(name) {        
        // call the super class constructor and pass in the name parameter
        super(name);        
        // Overriding an occupation property
        this.occupation = 'Student';
    }    
    // overriding Person's method
    greet() {
        console.log(`Hello student ${this.name}.`);
        console.log('occupation: ' + this.occupation);
    }
}
let p = new Student('sumit');
p.greet();

Hello student sumit.
occupation: Student
------------------------------------------
 
 

Object Oriented JavaScript(OOJS)  
Many times, variables or arrays are not sufficient to simulate real-life situations. JavaScript allows you to create objects that act like real life objects. A student or a home can be an object that have many unique characteristics of their own. You can create properties and methods to your objects to make programming easier. If your object is a student, it will have properties like first name, last name, id etc and methods like calculateRank, changeAddress etc. If your object is a home, it will have properties like a number of rooms, paint color, location etc and methods like calculateArea, changeOwner etc.

A javaScript object is an entity having state and behavior (properties and method). For example: car, pen, bike, chair, glass, keyboard, monitor etc.

JavaScript is an object-based language. Everything is an object in JavaScript.

JavaScript is template based not class based. Here, we don't create class to get the object. But, we direct create objects.


a=10
b="indore"
c=10+20
 
There are 3 ways to create objects.

(i)By object literal
(ii)By creating instance of Object directly (using new keyword)
(iii)By using an object constructor (using new keyword)

1) JavaScript Object by object literal
The syntax of creating object using object literal is given below:

object={property1:value1,property2:value2.....propertyN:valueN}  
As you can see, property and value is separated by : (colon).

  example of creating object in JavaScript.

<html>
<body>
<script>  
var r,n,p,c,m,tot,per;
r=parseInt(prompt("Enter roll no"));
n=prompt("Enter name");
p=parseInt(prompt("Enter phy marks"));
c=parseInt(prompt("Enter che marks"));
m=parseInt(prompt("Enter mat marks"));

student ={ rno:101,name:nisha,phy:34,che:67,mat:76}

student={rno:r,name:n,phy:p,che:c,mat:m}


student.tot=student.phy+student.che+student.mat
student.per=student.tot/3;
document.write("Roll no"+student.rno+"<br> "+"name "+student.name+"<br>"+"total ="+student.tot"<br>"+"per ="+student.per);  


emp={id:102,name:"Shyam Kumar",salary:40000}  
document.write(emp.id+" "+emp.name+" "+emp.salary);  
</script>
</body>
</html>


<html>
<head>
<title>Objects!!!</title>
<script type="text/javascript">
      var student = new Object();
      student.fName = "John";
      student.lName = "Smith";
      student.id = 5;
      student.markE = 76;
      student.markM = 99;
      student.markS = 87;
      student.calculateAverage = function()
      {
     return (student.markE + student.markM + student.markS)/3;
      };
      student.displayDetails = function()
      {
        document.write("Student Id: " + student.id + "<br />");
        document.write("Name: " + student.fName + " " + student.lName + "<br />");
        var avg = student.calculateAverage();
        document.write("Average Marks: " + avg);
      };
   student.displayDetails();
</script>
</head>
<body>
</body>
</html>

==================================================================================================================================================================================================================================================================================================================================================


oops,backtick
Inbox

vandana malviya <vandana2022malviya@gmail.com>
Thu, Nov 10, 2022, 2:04 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34



JavaScript Encapsulation
-------------------------------------------------------
The JavaScript Encapsulation is basically a process of binding the data with the functions acting on the same data and allows to control and validate the data. There are two methods to achieve an encapsulation in the JavaScript: -
By using setter methods to set the data and getter methods to receive that data.
By using var keyword to make data members private.
Using these following properties, encapsulation in JavaScript allows us to handle an object:
Write only :Only the setter methods is used in this case.
Read/Write :In this property, getter method is used to read the data and the setter method is used to set the data.
Read only :Only the getter methods used in this case.
Examples of JavaScript Encapsulation
1. Here is an example of encapsulation that contains two data members with its setter and getter methods:
<script>  
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
      this.marks=marks;  
    }  
 
    }  
    var stud=new Student();  
     stud.setName("Anand");  
     stud.setMarks(95);  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>
Output :Anand 95
2. JavaScript Encapsulation example in the context of validation
Here is an example to validate the marks of a student:
<script>
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  
      setName(name)  
      {  
        this.name=name;  
      }  
       
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
        if(marks<0||marks>100)  
        {  
          alert("Invalid Marks");  
        }  
      else  
        {  
          this.marks=marks;  
        }  
    }  
    }  
    var stud=new Student();  
     stud.setName("Sonu");  
     stud.setMarks(110);//alert() invokes  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>
Output :Anand undefined
3. JavaScript Encapsulation example in the context of Prototype-based approach.
Here is an example where prototype based encapsulation is performed:
<script>
function Student(name,marks)  
{  
  var s_name=name;  
  var s_marks=marks;  
  Object.defineProperty(this,"name",{  
    get:function()  
    {  
      return s_name;  
    },  
  set:function(s_name)  
  {  
    this.s_name=s_name;  
  }  
   
});  
   
    Object.defineProperty(this,"marks",{  
    get:function()  
    {  
      return s_marks;  
    },  
  set:function(s_marks)  
  {  
    this.s_marks=s_marks;  
  }  
   
});  
   
}  
  var stud=new Student("Anand",95);  
  document.writeln(stud.name+" "+stud.marks);  
</script>
Output :Anand 95

=======================
JavaScript Abstraction
The JavaScript abstraction is basically a process of hiding the implementation details and displaying only the functionality to all the users. In simple words we can say, JavaScript Abstraction ignores the irrelevant details and display only the necessary ones.
Please note that the following are the points to remember:
JavaScript Abstraction reduces the duplication of the code.
Please note that an instance of Abstract Class cannot be created.
Examples of JavaScript Abstraction
1. This example depicts whether users can create an instance of Abstract class or not.
<script>  
//Creating a constructor function  
function Vehicle()  
{  
    this.vehicleName= vehicleName;  
    throw new Error("An instance of Abstract class cannot be created");  
 
}  
Vehicle.prototype.display=function()  
{  
    return this.vehicleName;  
}  
var vehicle=new Vehicle();  
</script>  
Output :An instance of Abstract class cannot be created
2. Here is an example to achieve abstraction
<script>  
//Creating a constructor function  
 function Vehicle()  
{  
    this.vehicleName="vehicleName";  
    throw new Error("An instance of Abstract Class cannot be created");  

}  
Vehicle.prototype.display=function()  
{  
    return "Vehicle is: "+this.vehicleName;  
}  
//Creating a constructor function  
function Bike(vehicleName)  
{  
    this.vehicleName=vehicleName;  
}  
//Creating object without using the function constructor  
Bike.prototype=Object.create(Vehicle.prototype);  
var bike=new Bike("Suzuki");  
document.writeln(bike.display());  
 </script>  
Output :Vehicle is: Suzuki
3. In the following example, there is a depiction of the use of instanceof operator to test whether the object refers to the corresponding class.
<script>  
//Creating a constructor function  
 function Vehicle()  
{  
    this.vehicleName=vehicleName;  
    throw new Error("You cannot create an instance of Abstract class");  
}  
//Creating a constructor function  
function Bike(vehicleName)  
{  
    this.vehicleName=vehicleName;  
}  
Bike.prototype=Object.create(Vehicle.prototype);  
var bike=new Bike("Honda");  
document.writeln(bike instanceof Vehicle);  
document.writeln(bike instanceof Bike);  
</script>  
**************************************
---------------------------------------

JavaScript Inheritance
JavaScript Inheritance
The JavaScript inheritance is basically a mechanism that allows the users to create new classes on the basis of the already existing classes. JavaScript Inheritance delivers flexibility to the child class in order to reuse the methods and variables of a parent class.
In order to create a child class on the basis of a parent class JavaScript extends keyword is used. JavaScript extends keyword facilitates its child class to obtain all the properties and behavior of its parent class.
Please note that the following mentioned points are recommended to keep in mind:
All the properties and behavior of the inbuilt object as well as custom classes can be acquired by using extends keyword.
A prototype-based approach can also be used by the user to achieve inheritance.
An IS-A relationship is maintained by the JavaScript Inheritance.
The extends keyword is generally used in class expressions or class declarations.
Examples of JavaScript extends
1. JavaScript extends example in the context of inbuilt object.
Here is this example date object is extended to display the today's date:
<script>  
class DateTime extends Date
{  
  constructor()
  {  
    super();  
  }
}  
var m=new DateTime();  
document.writeln("Current date:")  
document.writeln(m.getDate()+"-"+(m.getMonth()+1)+"-"+m.getFullYear());  
</script>  
Output:Current date: 25-11-2019
Here is another example displaying the year value from the given date:
<script>  
class DateTime extends Date
{  
  constructor(year)
  {  
    super(year);  
  }
}  
var m=new DateTime("November 15,2019 20:22:10");  
document.writeln("Year value:")  
document.writeln(m.getFullYear());  
</script>  
Output:Year value: 1947
2. JavaScript extends example in the context of custom class
Here, in this example sub-class that extends the properties of its parent class is declared:

<script>
class Bike  
{  
  constructor()  
  {  
    this.company="suzuki";  
  }  
}  
class Vehicle extends Bike {  
  constructor(name,price) {  
   super();  
    this.name=name;  
    this.price=price;  
  }  
}  
var v = new Vehicle("Hayabusa","1400000");  
document.writeln(v.company+" "+v.name+" "+v.price);  
</script>
Output:suzuki Hayabusa 1400000
3. JavaScript extends example in the context of a prototype based approach.
In the following example, prototype based inheritance is performed. There is no need to use class and extends keywords in this approach.
<script>  
//Constructor function  
function Bike(company)  
{  
    this.company=company;  
}  
 
Bike.prototype.getCompany=function()  
{  
  return this.company;  
}  
//Another constructor function  
function Vehicle(name,price) {  
 this.name=name;  
  this.price=price;  
  }  
var bike = new Bike("Suzuki");  
Vehicle.prototype=bike; //Now Bike treats as a parent of Vehicle.  
var vehicle=new Vehicle("Hayabusa",1400000);  
document.writeln(vehicle.getCompany()+" "+vehicle.name+" "+vehicle.price);  
</script>
Output:Suzuki Hayabusa 1400000
===============================
 
JavaScript Polymorphism
The JavaScript polymorphism is basically a core concept of object-oriented paradigm providing a way so that a single action can be performed in different forms. Polymorphism provides an ability to call the very same method on various JavaScript objects. Since JavaScript is not a type-safe language, users can pass any type of data members with the methods.
Examples of JavaScript polymorphism
1. Here is an example where a child class object invokes the parent class method:
<script>
class A
  {
     display()
    {
      document.writeln("space is invoked");
    }
  }
class B extends A
  {
  }
var b=new B();
b.display();
</script>
Output :space is invoked
2. In the following example, a child and parent class contains the same method. This example depicts that the object of child class invokes both classes method.
<script>
class A
  {
     display()
    {
      document.writeln("space is invoked<br>");
    }
  }
class B extends A
  {
    display()
    {
      document.writeln("spacex is invoked");
    }
  }

var a=[new A(), new B()]
a.forEach(function(msg)
{
msg.display();
});
</script>
Output :
space is invoked
spacex is invoked
3. Here is an example depicting with prototype-based approach.
<script>  
function A()  
{  
}  
A.prototype.display=function()  
{  
  return "A is invoked";  
}  
function B()  
{  
   
}  
 
B.prototype=Object.create(A.prototype);  
 
var a=[new A(), new B()]  
 
a.forEach(function(msg)  
{  
  document.writeln(msg.display()+"<br>");  
});  
</script>  
Output :
A is invoked
A is invoked
=================


JavaScript Template Literals
Synonyms:

 
Back-Tics Syntax
Template Literals use back-ticks (``) rather than the quotes ("") to define a string:
` ` '   '   " "
var a="indore"
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>Template literals use back-ticks (``) to define a string:</p>

 

<p>Template literals are not supported in Internet Explorer.</p>

<script>
let text = `Hello world!`;
document.write(text);
</script>

</body>
</html>

Quotes Inside Strings
With template literals, you can use both single and double quotes inside a string:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>With back-ticks, you can use both single and double quotes inside a string:</p>

 

<p>Template literals are not supported in Internet Explorer.</p>

<script>
let text = `He's often called "Johnny"`;
let text = "He's often called "Johnny" ";
document.write(text);
</script>

</body>
</html>

Multiline Strings
Template literals allows multiline strings:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>Template literals allows multiline strings:</p>

 

<p>Template literals are not supported in Internet Explorer.</p>

<script>
let text ="The quick
brown fox
jumps over
the lazy dog";

document.write(text);
</script>

</body>
</html>
-------------------------------------------
Interpolation
Template literals provide an easy way to interpolate variables and expressions into strings.

The method is called string interpolation.

 syntax is:

${...}

Variable Substitutions
Template literals allow variables in strings:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Template Literals</h2>

<p>Template literals allows variables in strings:</p>

 
<p>Template literals are not supported in Internet Explorer.</p>

<script>
let firstName = "John";
let lastName = "Doe";

a=34;
b=43;
c=a+b;
console.log(`sum=  ${c}`)
document.write(firstname+"  " +lastname);

let text = `Welcome ${firstName}, ${lastName}!`;

document.write(text);
</script>

</body>
</html>



===========================

<!DOCTYPE html>
<html>
<body>

<div style="text-align:center">
  <button onclick="playPause()">Play/Pause</button>
  <button onclick="makeBig()">Big</button>
  <button onclick="makeSmall()">Small</button>
  <button onclick="makeNormal()">Normal</button>
  <br>
  <video id="video1" width="420">
    <source src="E:\HTML\shee html\audio-video\mov_bbb.mp4" type="video/mp4">
  </video>
</div>

<script>
var myVideo = document.getElementById("video1");

function playPause() {
    if (myVideo.paused)
        myVideo.play();
    else
        myVideo.pause();
}

function makeBig() {
    myVideo.width = 560;
}

function makeSmall() {
    myVideo.width = 320;
}

function makeNormal() {
    myVideo.width = 420;
}
</script>

</body>
</html>
======================


===================================================================================================================================================================================================================================================================================================================================================================================================
object based
Inbox

vandana malviya <vandana2022malviya@gmail.com>
Wed, Nov 9, 2022, 2:14 PM
to mukesh.randhawe, dk070025, lokeshjigupta28, nikitapatidar0198, reshabhjat5, Ram98060, Akram, ganeshsavner320, patelpallavi1995, sonali_patel31, yogitasolanki1200, patilvishu8727, dhotepravin719, vrushangsoni782, alfezkhan707, me, sandipprajapat2715, sphitendra34


Object Oriented JavaScript(OOJS)  
Many times, variables or arrays are not sufficient to simulate real-life situations. JavaScript allows you to create objects that act like real life objects. A student or a home can be an object that have many unique characteristics of their own. You can create properties and methods to your objects to make programming easier. If your object is a student, it will have properties like first name, last name, id etc and methods like calculateRank, changeAddress etc. If your object is a home, it will have properties like a number of rooms, paint color, location etc and methods like calculateArea, changeOwner etc.

A javaScript object is an entity having state and behavior (properties and method). For example: car, pen, bike, chair, glass, keyboard, monitor etc.

JavaScript is an object-based language. Everything is an object in JavaScript.

JavaScript is template based not class based. Here, we don't create class to get the object. But, we direct create objects.


a=10
b="indore"
c=10+20
 
There are 3 ways to create objects.

(i)By object literal
(ii)By creating instance of Object directly (using new keyword)
(iii)By using an object constructor (using new keyword)

1) JavaScript Object by object literal
The syntax of creating object using object literal is given below:

object={property1:value1,property2:value2.....propertyN:valueN}  
As you can see, property and value is separated by : (colon).

  example of creating object in JavaScript.

<html>
<body>
<script>  
var r,n,p,c,m,tot,per;
r=parseInt(prompt("Enter roll no"));
n=prompt("Enter name");
p=parseInt(prompt("Enter phy marks"));
c=parseInt(prompt("Enter che marks"));
m=parseInt(prompt("Enter mat marks"));

student ={ rno:101,name:nisha,phy:34,che:67,mat:76}

student={rno:r,name:n,phy:p,che:c,mat:m}


student.tot=student.phy+student.che+student.mat
student.per=student.tot/3;
document.write("Roll no"+student.rno+"<br> "+"name "+student.name+"<br>"+"total ="+student.tot"<br>"+"per ="+student.per);  



emp={id:102,name:"Shyam Kumar",salary:40000}  
document.write(emp.id+" "+emp.name+" "+emp.salary);  
</script>
</body>
</html>


<html>
<head>
<title>Objects!!!</title>
<script type="text/javascript">
      var student = new Object();
      student.fName = "John";
      student.lName = "Smith";
      student.id = 5;
      student.markE = 76;
      student.markM = 99;
      student.markS = 87;
      student.calculateAverage = function()
      {
     return (student.markE + student.markM + student.markS)/3;
      };
      student.displayDetails = function()
      {
        document.write("Student Id: " + student.id + "<br />");
        document.write("Name: " + student.fName + " " + student.lName + "<br />");
        var avg = student.calculateAverage();
        document.write("Average Marks: " + avg);
      };
   student.displayDetails();
</script>
</head>
<body>
</body>
</html>

JavaScript for...in Loop
The JavaScript for...in statement loops through the properties of an object.

Syntax
for (let variable in object) {
  // code to be executed
}
The block of code inside of the for...in loop will be executed once for each property.

Looping through the properties of an object:

Example

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Properties</h2>
<p>Looping object property values:</p>

< <!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Properties</h2>
<p>Add a new property to an existing object:</p>

<p id="demo"></p>

<script>
 person = {
  firstname: "John",
  lastname: "Doe",
  age: 50,
  eyecolor: "blue"
};

person.nationality = "English";
document.getElementById("demo").innerHTML =
person.firstname + " is " + person.nationality + ".";
</script>

</body>
</html>
></p>

<script>
 person = {  fname:"ram",  lname:"sharma",  age:25};
 txt = "";
for ( x in person)
{
//  txt += person[x] + " ";
document.write(person[x] + " ");
}


document.getElementById("demo").innerHTML = txt;
</script>

</body>
</html>





<html>
<head>
<title>Objects!!!</title>



</head>
<body>
  <span id="demo"></span>
    <script>
 person = {  fname:"ram",  lname:"sharma",  age:25,city:"indore"};
 txt = "";
for ( x in person)
{
  txt =txt+ person[x] + " ";
//document.write(person[x] + " ");
}


document.getElementById("demo").innerHTML = txt;
</script>
 
</body>
</html>



<html>
<head>    
<body>
  <p id="demo">  </p>  


</body>
<script>
 person = {  fname:"ram",  lname:"sharma",  age:25,city:"pune"};
  txt = "";
for ( i in person)
{
  txt =txt+ person[i] + " ";
document.write(person[i] + " ");
}
document.getElementById("demo").innerHTML = txt;
</script>
</head>
 

</html>








<html>
<body>
<script>  
var r,n,p,c,m,tot,per;
r=parseInt(prompt("Enter roll no"));
n=prompt("Enter name");
p=parseInt(prompt("Enter phy marks"));
c=parseInt(prompt("Enter che marks"));
m=parseInt(prompt("Enter mat marks"));
student={rno:r,name:n,phy:p,che:c,mat:m}
student.tot=student.phy+student.che+student.mat
student.per=student.tot/3;
for ( x in student)
{
document.write(student[x] + " ");
}


</script>
</body>
</html>






Adding New Properties
You can add new properties to an existing object by simply giving it a value.

Assume that the person object already exists - you can then give it new properties:


<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Properties</h2>
<p>Add a new property to an existing object:</p>

<p id="demo"></p>

<script>
  person = {
  firstname: "John",
  lastname: "Doe",
  age: 50,
  eyecolor: "blue"
};

person.nationality = "English";
document.getElementById("demo").innerHTML =
person.firstname + " is " + person.nationality + ".";
</script>

</body>
</html>




 2) By creating instance of Object
The syntax of creating object directly is given below:

var objectname=new Object();  

Here, new keyword is used to create object.

<html>
<body>
<script>  
var emp=new Object();  
emp.id=101;  
emp.name="Ravi Malik";  
emp.salary=50000;  
document.write(emp.id+" "+emp.name+" "+emp.salary);  
</script>
</body>
</html>

 <html>
<body>
<script>  
var emp=new Object();  
emp.id=parseInt(prompt("Enter Id"));  
emp.name=parseInt(prompt("Enter Name"));    
emp.salary=parseInt(prompt("Enter salary"));  ;  
document.write(emp.id+" "+emp.name+" "+emp.salary);  
</script>
</body>
</html>

-------------------------
3) By using an Object constructor
Here, you need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.
The this keyword refers to the current object.
The example of creating object by object constructor is given below.
<html>
<body>
<script>  
function emp(id,name,salary){  
this.id=id;  
this.name=name;  
this.salary=salary;  
}  
e=new emp(103,"Vimal Jaiswal",30000);  

document.write(e.id+" "+e.name+" "+e.salary);  
</script>  
</body>
</html>

 Defining method in JavaScript Object
We can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method.

The example of defining method in object is given below.

 

 example of defining method in object  .

<html>
<body>
<script>  
function emp(id,name,salary){  
this.id=id;  
this.name=name;  
this.salary=salary;  
//this.changeSalary=changeSalary;  

function changeSalary(otherSalary){  
this.salary=otherSalary;  
}  
}  
e=new emp(103,"Sonoo Jaiswal",30000);  
document.write(e.id+" "+e.name+" "+e.salary);  
e.changeSalary(45000);  
document.write("<br>"+e.id+" "+e.name+" "+e.salary);  
</script>  
</body>
</html>

-----------------------


var objName = new Object();
objName.property1 = value1;
objName.property2 = value2;
objName.method1 = function()
{
line of code
}
---------------------

html>
<head>
<title>Objects!!!</title>
<script type="text/javascript">
      var student = new Object();
      student.fName = "sonakshi";
      student.lName = "shah";
      student.id = 5;
      student.markE = 76;
      student.markM = 99;
      student.markS = 87;
      student.calculateAverage = function()
      {
      return (student.markE + student.markM + student.markS)/3;
      };
      student.displayDetails = function()
      {
document.write("Student Id: " + student.id + "<br />");
document.write("Name: " + student.fName + " " + student.lName + "<br />");
        var avg = student.calculateAverage();
        document.write("Average Marks: " + avg);
      };
student.displayDetails();
</script>
</head>
<body>
</body>
</html>
===============================
function overloading function name must be same but number ofparamenter are
different
<html>
<head>
</head>
<body>
<script type="text/javascript">
function sum (a,b)
{ return(a+b);
}
function sum (a,b,c)
{ return(a+b+c);
}
function sum (a)
{ return(a+a+a);
}

document.write(sum(2,3)+"<br>");
document.write(sum(12,13)+"<br>");
document.write(sum(1,2,3)+"<br>");
document.write(sum(1)+"<br>");
</script>
</body>
</html>



--------------------------------------

<!DOCTYPE html>
<html>
<body>
<h1>Demo: Class in JavaScript</h1>
<p id="p1"></p>

<script>    
function Person() {
this.firstName = "unknown";
this.lastName = "unknown";
}

var person1 = new Person();
person1.firstName = "Steve";
person1.lastName = "Jobs";
           
alert(person1.firstName + " " + person1.lastName);

var person2 = new Person();
person2.firstName = "Bill";
person2.lastName = "Gates";
           
alert(person2.firstName + " " + person2.lastName );
</script>
</body>
</html>

--------
Add Methods in a Class

<!DOCTYPE html>
<html>
<body>
<h1>Demo: Class in JavaScript</h1>
<p id="p1"></p>

<script>    
function Person() {
            this.firstName = "unknown";
            this.lastName = "unknown";
            this.getFullName = function(){
                return this.firstName + " " + this.lastName;
            }
        };

var person1 = new Person();
person1.firstName = "Steve";
person1.lastName = "Jobs";

alert(person1.getFullName());
     
var person2 = new Person();
person2.firstName = "Bill";
person2.lastName = "Gates";

alert(person2.getFullName());
</script>
</body>
</html>
---------------------------------------
OOPS Constructor

But creating objects of this kind is not that useful because here also, you will have to create different objects for different students. Here comes object constructor into picture. Object constructor helps you create an object type which can be reused to meet the need of individual instance.

 a function with one or more parameters can be used like a constructor where you can pass parameter values at the time or creating an object with new keyword.


<html>
<head>
<script type="text/javascript">
function Student(first, last, id, english, maths, science)
        {
          this.fName = first;
          this.lName = last;
          this.id = id;
          this.markE = english;
          this.markM = maths;
          this.markS = science;
          this.calculateAverage = function()
          {
          return (this.markE + this.markM + this.markS)/3;
          }
   this.displayDetails = function()
 {
            document.write("Student Id: " + this.id + "<br />");
            document.write("Name: " + this.fName + " " + this.lName + "<br />");
            var avg = this.calculateAverage();
            document.write("Average Marks: " + avg + "<br /><br />");
 }
}
        var st1 = new Student("John", "Smith", 15, 85, 79, 90);
        var st2 = new Student("Hannah", "Turner", 23, 75, 80, 82);
        var st3 = new Student("Kevin", "White", 4, 93, 89, 90);
        var st4 = new Student("Rose", "Taylor", 11, 55, 63, 45);
        st1.displayDetails();
        st2.displayDetails();
        st3.displayDetails();
        st4.displayDetails();
</script>
</head>
<body>
</body>
</html>
Loop Through the Properties of an Object

Syntax:

for (variablename in objectname)
{
lines of code to be executed
}
--------------------------------------------
<html>
<head>
<script type="text/javascript">
    var employee={first:"John", last:"Doe", department:"Accounts"};
        var details = "";
        document.write("<b>Using for/in loops </b><br />");
        for (var x in employee)
        {
          details = x + ": " + employee[x];
          document.write(details + "<br />");
        }
</script>
</head>
<body>
</body>
</html>
---------------------------------------------------------------
JavaScript Object Constructors
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

 

<script>
// Constructor function for Person objects
function Employee(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

// Create a Person object
 obj = new Employee("John", "Doe", 50, "blue");

// Display age
document.write("My Dirctor ages is " + obj.age + ".";
</script>

</body>
</html>
-----------------------------------
Object Types (Blueprints) (Classes)
we create single objects.

Sometimes we need a "blueprint" for creating many objects of the same "type".

The way to create an "object type", is to use an object constructor function.

In the example above, function Person() is an object constructor function.

Objects of the same type are created by calling the constructor function with the new keyword:


<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

 

<script>

// Constructor function for employee objects
function Employee(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

// Create two Employee objects
  admin = new Employee("sunil", "malviya", 50, "blue");
  manager = new Employee("shelly", "saluja", 48, "green");

// Display age
document.write("Admin age is " + admin.age + ". and manager is " + manager.age + ".";

</script>

</body>
</html>

-------------------------------------------------
The this Keyword
In JavaScript, the thing called this is the object that "owns" the code.

The value of this, when used in an object, is the object itself.

In a constructor function this does not have a value. It is a substitute for the new object. The value of this will become the new object when a new object is created.

Note that this is not a variable. It is a keyword. You cannot change the value of this.

Adding a Property to an Object
Adding a new property to an existing object is easy:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

 

<script>
// Constructor function for Employee objects
function Employee(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

// Create 2 employee objects
   F  = new Employee("rahul", "Desai", 50, "blue");
   M  = new Employee("Sally", "jain", 48, "green");

// Add nationality to first object
 F.nationality = "Italian";
 F.salary=parseInt(prompt("Enter your salary|"));

// Display nationality
document.write("My manager is " + myFather.nationality;
</script>

</body>
</html>
-----------------------------


Adding a Method to an Object
Adding a new method to an existing object is easy:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

<script>

// Constructor function for Person objects
function Employee(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}


// Create 2 Employee objects
 F  = new Employee("mukesh", "ambani", 50, "blue");
 M = new Employee("Sally", "saluja", 48, "green");

// Add a name method to first object
F.name = function() {
  return this.firstName + " " + this.lastName;
};

// Display full name
document.write ="My director name is " + F.name();
</script>

</body>
</html>

-----------------------------------------------
Adding a Property to a Constructor
You cannot add a new property to an object constructor the same way you add a new property to an existing object:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

<p>You cannot add a new property to a constructor function.</p>

 

<script>

// Constructor function for Person objects
function Employee(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

// You can NOT add a new property to a constructor function
Employee.nationality = "Indian";

// Create 2 Person objects
  F  = new Employee("riya", "saluja", 50, "blue");
 M  = new Employee("Shally", "raj", 48, "green");

// Display nationality
document.write("The nationality of my Director is " + F.nationality;
</script>

</body>
</html>
------------------------------------------------------------------
To add a new property to a constructor, you must add it to the constructor function:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

 

<script>

// Constructor function for Person objects
function Employee(first, last, age, sal ) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.salary = sal ;
  this.nationality = "Indian";
}

// Create 2 Person objects
 F  = new Employee("ramesh", "jain", 50, 50000);
 M  = new Employee("Shelly", "sippy", 48, 70000);

// Display nationality
document.write("My Director is " + F.nationality + ". My manager is " + M.nationality;
</script>

</body>
</html>
------------------------------------------------

Adding a Method to a Constructor
Your constructor function can also define methods:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

 

<script>

// Constructor function for Person objects
function Employee(first, last, age, sal ) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.salary = sal;
  this.name = function() {
    return this.firstName + " " + this.lastName
  };
}

// Create a employee object
 F  = new Employee("ramesh", "sippy", 50, 30000);

// Display full name
document.write("My director is " + F.name();

</script>

</body>
</html>

----------------------------------

You cannot add a new method to an object constructor the same way you add a new method to an existing object.

Adding methods to an object constructor must be done inside the constructor function:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Object Constructors</h2>

 

<script>
// Constructor function for Person objects
function Employee(firstName,lastName,age,eyeColor) {
  this.firstName = firstName;
  this.lastName = lastName;
  this.age = age;
  this.eyeColor = eyeColor;
  this.changeName = function (name) {
    this.lastName = name;
  }
}
// Create a Employee object
M = new Employee("suresh","saluja",48,"green");

// Change last name
M.changeName("Dinesh");

// Display last name
document.write("My Director name is " + M.lastName;
</script>

</body>
</html>

====================================




Object Oriented JavaScript(OOJS) Tutorial with Example

What is OOPS Concept in JavaScript?
Many times, variables or arrays are not sufficient to simulate real-life situations. JavaScript allows you to create objects that act like real life objects. A student or a home can be an object that have many unique characteristics of their own. You can create properties and methods to your objects to make programming easier. If your object is a student, it will have properties like first name, last name, id etc and methods like calculateRank, changeAddress etc. If your object is a home, it will have properties like a number of rooms, paint color, location etc and methods like calculateArea, changeOwner etc.

How to Create an Object
You can create an object like this:

var objName = new Object();
objName.property1 = value1;
objName.property2 = value2;
objName.method1 = function()
{
line of code
}
OR

var objName= {property1:value1, property2:value2, method1: function()

{ lines of code} };
Access Object Properties and Methods

You can access properties of an object like this:

objectname.propertyname;
You can access methods of an object like this:

objectname.methodname();




<html>
<head>
<title>Objects!!!</title>
<script type="text/javascript">
      var student = new Object();
      student.fName = "John";
      student.lName = "Smith";
      student.id = 5;
      student.markE = 76;
      student.markM = 99;
      student.markS = 87;
      student.calculateAverage = function()
      {
      return (student.markE + student.markM + student.markS)/3;
      };
      student.displayDetails = function()
      {
        document.write("Student Id: " + student.id + "<br />");
        document.write("Name: " + student.fName + " " + student.lName + "<br />");
        var avg = student.calculateAverage();
        document.write("Average Marks: " + avg);
      };
student.displayDetails();
</script>
</head>
<body>
</body>
</html>









OOPS Constructor
But creating objects of this kind is not that useful because here also, you will have to create different objects for different students. Here comes object constructor into picture. Object constructor helps you create an object type which can be reused to meet the need of individual instance.

<html>
<head>
<script type="text/javascript">
function Student(first, last, id, english, maths, science)
        {
          this.fName = first;
          this.lName = last;
          this.id = id;
          this.markE = english;
          this.markM = maths;
          this.markS = science;
          this.calculateAverage = function()
          {
          return (this.markE + this.markM + this.markS)/3;
          }
 this.displayDetails = function()
 {
            document.write("Student Id: " + this.id + "<br />");
            document.write("Name: " + this.fName + " " + this.lName + "<br />");
            var avg = this.calculateAverage();
            document.write("Average Marks: " + avg + "<br /><br />");
 }
}
        var st1 = new Student("John", "Smith", 15, 85, 79, 90);
        var st2 = new Student("Hannah", "Turner", 23, 75, 80, 82);
        var st3 = new Student("Kevin", "White", 4, 93, 89, 90);
        var st4 = new Student("Rose", "Taylor", 11, 55, 63, 45);
        st1.displayDetails();
        st2.displayDetails();
        st3.displayDetails();
        st4.displayDetails();
</script>
</head>
<body>
</body>
</html>


Loop Through the Properties of an Object
Syntax:

for (variablename in objectname)

{

lines of code to be executed

}
The for/in a loop is usually used to loop through the properties of an object. You can give any name for the variable, but the name of the object should be the same as that of an already existing object which you need to loop through.

<html>
<head>
<script type="text/javascript">
var employee={first:"John", last:"Doe", department:"Accounts"};
        var details = "";
        document.write("<b>Using for/in loops </b><br />");
        for (var x in employee)
        {
          details = x + ": " + employee[x];
          document.write(details + "<br />");
        }
</script>
</head>
<body>
</body>
</html>



